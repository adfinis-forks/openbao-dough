/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../routes/__root'
import { Route as LoginRouteImport } from './../routes/login'
import { Route as AuthenticatedRouteImport } from './../routes/_authenticated'
import { Route as AuthenticatedIndexRouteImport } from './../routes/_authenticated/index'
import { Route as AuthenticatedSecretsRouteImport } from './../routes/_authenticated/secrets'
import { Route as AuthenticatedEnableAuthMethodRouteImport } from './../routes/_authenticated/enable-auth-method'
import { Route as AuthenticatedDashboardRouteImport } from './../routes/_authenticated/dashboard'
import { Route as AuthenticatedAuditRouteImport } from './../routes/_authenticated/audit'
import { Route as AuthenticatedAccessRouteImport } from './../routes/_authenticated/access'
import { Route as AuthenticatedSettingsSealRouteImport } from './../routes/_authenticated/settings.seal'
import { Route as AuthenticatedPoliciesAclRouteImport } from './../routes/_authenticated/policies.acl'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedSecretsRoute = AuthenticatedSecretsRouteImport.update({
  id: '/secrets',
  path: '/secrets',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedEnableAuthMethodRoute =
  AuthenticatedEnableAuthMethodRouteImport.update({
    id: '/enable-auth-method',
    path: '/enable-auth-method',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedAuditRoute = AuthenticatedAuditRouteImport.update({
  id: '/audit',
  path: '/audit',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedAccessRoute = AuthenticatedAccessRouteImport.update({
  id: '/access',
  path: '/access',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedSettingsSealRoute =
  AuthenticatedSettingsSealRouteImport.update({
    id: '/settings/seal',
    path: '/settings/seal',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedPoliciesAclRoute =
  AuthenticatedPoliciesAclRouteImport.update({
    id: '/policies/acl',
    path: '/policies/acl',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/access': typeof AuthenticatedAccessRoute
  '/audit': typeof AuthenticatedAuditRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/enable-auth-method': typeof AuthenticatedEnableAuthMethodRoute
  '/secrets': typeof AuthenticatedSecretsRoute
  '/': typeof AuthenticatedIndexRoute
  '/policies/acl': typeof AuthenticatedPoliciesAclRoute
  '/settings/seal': typeof AuthenticatedSettingsSealRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/access': typeof AuthenticatedAccessRoute
  '/audit': typeof AuthenticatedAuditRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/enable-auth-method': typeof AuthenticatedEnableAuthMethodRoute
  '/secrets': typeof AuthenticatedSecretsRoute
  '/': typeof AuthenticatedIndexRoute
  '/policies/acl': typeof AuthenticatedPoliciesAclRoute
  '/settings/seal': typeof AuthenticatedSettingsSealRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/access': typeof AuthenticatedAccessRoute
  '/_authenticated/audit': typeof AuthenticatedAuditRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/enable-auth-method': typeof AuthenticatedEnableAuthMethodRoute
  '/_authenticated/secrets': typeof AuthenticatedSecretsRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/policies/acl': typeof AuthenticatedPoliciesAclRoute
  '/_authenticated/settings/seal': typeof AuthenticatedSettingsSealRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/access'
    | '/audit'
    | '/dashboard'
    | '/enable-auth-method'
    | '/secrets'
    | '/'
    | '/policies/acl'
    | '/settings/seal'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/access'
    | '/audit'
    | '/dashboard'
    | '/enable-auth-method'
    | '/secrets'
    | '/'
    | '/policies/acl'
    | '/settings/seal'
  id:
    | '__root__'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/access'
    | '/_authenticated/audit'
    | '/_authenticated/dashboard'
    | '/_authenticated/enable-auth-method'
    | '/_authenticated/secrets'
    | '/_authenticated/'
    | '/_authenticated/policies/acl'
    | '/_authenticated/settings/seal'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/secrets': {
      id: '/_authenticated/secrets'
      path: '/secrets'
      fullPath: '/secrets'
      preLoaderRoute: typeof AuthenticatedSecretsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/enable-auth-method': {
      id: '/_authenticated/enable-auth-method'
      path: '/enable-auth-method'
      fullPath: '/enable-auth-method'
      preLoaderRoute: typeof AuthenticatedEnableAuthMethodRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/audit': {
      id: '/_authenticated/audit'
      path: '/audit'
      fullPath: '/audit'
      preLoaderRoute: typeof AuthenticatedAuditRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/access': {
      id: '/_authenticated/access'
      path: '/access'
      fullPath: '/access'
      preLoaderRoute: typeof AuthenticatedAccessRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/settings/seal': {
      id: '/_authenticated/settings/seal'
      path: '/settings/seal'
      fullPath: '/settings/seal'
      preLoaderRoute: typeof AuthenticatedSettingsSealRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/policies/acl': {
      id: '/_authenticated/policies/acl'
      path: '/policies/acl'
      fullPath: '/policies/acl'
      preLoaderRoute: typeof AuthenticatedPoliciesAclRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedAccessRoute: typeof AuthenticatedAccessRoute
  AuthenticatedAuditRoute: typeof AuthenticatedAuditRoute
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedEnableAuthMethodRoute: typeof AuthenticatedEnableAuthMethodRoute
  AuthenticatedSecretsRoute: typeof AuthenticatedSecretsRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedPoliciesAclRoute: typeof AuthenticatedPoliciesAclRoute
  AuthenticatedSettingsSealRoute: typeof AuthenticatedSettingsSealRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAccessRoute: AuthenticatedAccessRoute,
  AuthenticatedAuditRoute: AuthenticatedAuditRoute,
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedEnableAuthMethodRoute: AuthenticatedEnableAuthMethodRoute,
  AuthenticatedSecretsRoute: AuthenticatedSecretsRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedPoliciesAclRoute: AuthenticatedPoliciesAclRoute,
  AuthenticatedSettingsSealRoute: AuthenticatedSettingsSealRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
