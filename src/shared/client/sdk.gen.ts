// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type {
  AliasCreateData,
  AliasCreateResponses,
  AliasDeleteByIdData,
  AliasDeleteByIdResponses,
  AliasListByIdData,
  AliasListByIdResponses,
  AliasReadByIdData,
  AliasReadByIdResponses,
  AliasUpdateByIdData,
  AliasUpdateByIdResponses,
  AuditingCalculateHashData,
  AuditingCalculateHashResponses,
  AuditingDisableDeviceData,
  AuditingDisableDeviceResponses,
  AuditingDisableRequestHeaderData,
  AuditingDisableRequestHeaderResponses,
  AuditingEnableDeviceData,
  AuditingEnableDeviceResponses,
  AuditingEnableRequestHeaderData,
  AuditingEnableRequestHeaderResponses,
  AuditingListEnabledDevicesData,
  AuditingListEnabledDevicesResponses,
  AuditingListRequestHeadersData,
  AuditingListRequestHeadersResponses,
  AuditingReadRequestHeaderInformationData,
  AuditingReadRequestHeaderInformationResponses,
  AuthDisableMethodData,
  AuthDisableMethodResponses,
  AuthEnableMethodData,
  AuthEnableMethodResponses,
  AuthListEnabledMethodsData,
  AuthListEnabledMethodsResponses,
  AuthReadConfigurationData,
  AuthReadConfigurationResponses,
  AuthReadTuningInformationData,
  AuthReadTuningInformationResponses,
  AuthTuneConfigurationParametersData,
  AuthTuneConfigurationParametersResponses,
  CollectHostInformationData,
  CollectHostInformationResponses,
  CollectInFlightRequestInformationData,
  CollectInFlightRequestInformationResponses,
  CorsConfigureData,
  CorsConfigureResponses,
  CorsDeleteConfigurationData,
  CorsDeleteConfigurationResponses,
  CorsReadConfigurationData,
  CorsReadConfigurationResponses,
  CubbyholeDeleteData,
  CubbyholeDeleteResponses,
  CubbyholeReadData,
  CubbyholeReadResponses,
  CubbyholeWriteData,
  CubbyholeWriteResponses,
  DecodeData,
  DecodeResponses,
  EncryptionKeyConfigureRotateKeyringConfigData,
  EncryptionKeyConfigureRotateKeyringConfigResponses,
  EncryptionKeyConfigureRotationConfigurationData,
  EncryptionKeyConfigureRotationConfigurationResponses,
  EncryptionKeyReadRotateKeyringConfigData,
  EncryptionKeyReadRotateKeyringConfigResponses,
  EncryptionKeyReadRotationConfigurationData,
  EncryptionKeyReadRotationConfigurationResponses,
  EncryptionKeyRotateData,
  EncryptionKeyRotateResponses,
  EncryptionKeyRotateRotateKeyringData,
  EncryptionKeyRotateRotateKeyringResponses,
  EncryptionKeyStatusData,
  EncryptionKeyStatusResponses,
  EntityBatchDeleteData,
  EntityBatchDeleteResponses,
  EntityCreateAliasData,
  EntityCreateAliasResponses,
  EntityCreateData,
  EntityCreateResponses,
  EntityDeleteAliasByIdData,
  EntityDeleteAliasByIdResponses,
  EntityDeleteByIdData,
  EntityDeleteByIdResponses,
  EntityDeleteByNameData,
  EntityDeleteByNameResponses,
  EntityListAliasesByIdData,
  EntityListAliasesByIdResponses,
  EntityListByIdData,
  EntityListByIdResponses,
  EntityListByNameData,
  EntityListByNameResponses,
  EntityLookUpData,
  EntityLookUpResponses,
  EntityMergeData,
  EntityMergeResponses,
  EntityReadAliasByIdData,
  EntityReadAliasByIdResponses,
  EntityReadByIdData,
  EntityReadByIdResponses,
  EntityReadByNameData,
  EntityReadByNameResponses,
  EntityUpdateAliasByIdData,
  EntityUpdateAliasByIdResponses,
  EntityUpdateByIdData,
  EntityUpdateByIdResponses,
  EntityUpdateByNameData,
  EntityUpdateByNameResponses,
  GenerateHashData,
  GenerateHashResponses,
  GenerateHashWithAlgorithmData,
  GenerateHashWithAlgorithmResponses,
  GenerateRandomData,
  GenerateRandomResponses,
  GenerateRandomWithBytesData,
  GenerateRandomWithBytesResponses,
  GenerateRandomWithSourceAndBytesData,
  GenerateRandomWithSourceAndBytesResponses,
  GenerateRandomWithSourceData,
  GenerateRandomWithSourceResponses,
  GroupCreateAliasData,
  GroupCreateAliasResponses,
  GroupCreateData,
  GroupCreateResponses,
  GroupDeleteAliasByIdData,
  GroupDeleteAliasByIdResponses,
  GroupDeleteByIdData,
  GroupDeleteByIdResponses,
  GroupDeleteByNameData,
  GroupDeleteByNameResponses,
  GroupListAliasesByIdData,
  GroupListAliasesByIdResponses,
  GroupListByIdData,
  GroupListByIdResponses,
  GroupListByNameData,
  GroupListByNameResponses,
  GroupLookUpData,
  GroupLookUpResponses,
  GroupReadAliasByIdData,
  GroupReadAliasByIdResponses,
  GroupReadByIdData,
  GroupReadByIdResponses,
  GroupReadByNameData,
  GroupReadByNameResponses,
  GroupUpdateAliasByIdData,
  GroupUpdateAliasByIdResponses,
  GroupUpdateByIdData,
  GroupUpdateByIdResponses,
  GroupUpdateByNameData,
  GroupUpdateByNameResponses,
  HaStatusData,
  HaStatusResponses,
  InitializeSystemData,
  InitializeSystemResponses,
  InternalCountEntitiesData,
  InternalCountEntitiesResponses,
  InternalCountRequestsData,
  InternalCountRequestsResponses,
  InternalCountTokensData,
  InternalCountTokensResponses,
  InternalGenerateOpenApiDocumentData,
  InternalGenerateOpenApiDocumentResponses,
  InternalGenerateOpenApiDocumentWithParametersData,
  InternalGenerateOpenApiDocumentWithParametersResponses,
  InternalInspectRequestData,
  InternalInspectRequestResponses,
  InternalInspectRouterData,
  InternalInspectRouterResponses,
  InternalUiListEnabledFeatureFlagsData,
  InternalUiListEnabledFeatureFlagsResponses,
  InternalUiListEnabledVisibleMountsData,
  InternalUiListEnabledVisibleMountsResponses,
  InternalUiListNamespacesData,
  InternalUiListNamespacesResponses,
  InternalUiReadMountInformationData,
  InternalUiReadMountInformationResponses,
  InternalUiReadResultantAclData,
  InternalUiReadResultantAclResponses,
  KvDeleteDataPathData,
  KvDeleteDataPathResponses,
  KvDeleteMetadataPathData,
  KvDeleteMetadataPathResponses,
  KvListDetailedMetadataPathData,
  KvListDetailedMetadataPathResponses,
  KvReadConfigData,
  KvReadConfigResponses,
  KvReadDataPathData,
  KvReadDataPathResponses,
  KvReadMetadataPathData,
  KvReadMetadataPathResponses,
  KvReadSubkeysPathData,
  KvReadSubkeysPathResponses,
  KvWriteConfigData,
  KvWriteConfigResponses,
  KvWriteDataPathData,
  KvWriteDataPathResponses,
  KvWriteDeletePathData,
  KvWriteDeletePathResponses,
  KvWriteDestroyPathData,
  KvWriteDestroyPathResponses,
  KvWriteMetadataPathData,
  KvWriteMetadataPathResponses,
  KvWriteUndeletePathData,
  KvWriteUndeletePathResponses,
  LeaderStatusData,
  LeaderStatusResponses,
  LeasesCountData,
  LeasesCountResponses,
  LeasesForceRevokeLeaseWithPrefix2Data,
  LeasesForceRevokeLeaseWithPrefix2Responses,
  LeasesForceRevokeLeaseWithPrefixData,
  LeasesForceRevokeLeaseWithPrefixResponses,
  LeasesListData,
  LeasesListResponses,
  LeasesLookUpData,
  LeasesLookUpResponses,
  LeasesLookUpWithPrefixData,
  LeasesLookUpWithPrefixResponses,
  LeasesReadLeaseData,
  LeasesReadLeaseResponses,
  LeasesRenewLease2Data,
  LeasesRenewLease2Responses,
  LeasesRenewLeaseData,
  LeasesRenewLeaseResponses,
  LeasesRenewLeaseWithId2Data,
  LeasesRenewLeaseWithId2Responses,
  LeasesRenewLeaseWithIdData,
  LeasesRenewLeaseWithIdResponses,
  LeasesRevokeLease2Data,
  LeasesRevokeLease2Responses,
  LeasesRevokeLeaseData,
  LeasesRevokeLeaseResponses,
  LeasesRevokeLeaseWithId2Data,
  LeasesRevokeLeaseWithId2Responses,
  LeasesRevokeLeaseWithIdData,
  LeasesRevokeLeaseWithIdResponses,
  LeasesRevokeLeaseWithPrefix2Data,
  LeasesRevokeLeaseWithPrefix2Responses,
  LeasesRevokeLeaseWithPrefixData,
  LeasesRevokeLeaseWithPrefixResponses,
  LeasesTidyData,
  LeasesTidyResponses,
  LockedUsersListData,
  LockedUsersListResponses,
  LockedUsersUnlockData,
  LockedUsersUnlockResponses,
  LoggersReadVerbosityLevelData,
  LoggersReadVerbosityLevelForData,
  LoggersReadVerbosityLevelForResponses,
  LoggersReadVerbosityLevelResponses,
  LoggersRevertVerbosityLevelData,
  LoggersRevertVerbosityLevelForData,
  LoggersRevertVerbosityLevelForResponses,
  LoggersRevertVerbosityLevelResponses,
  LoggersUpdateVerbosityLevelData,
  LoggersUpdateVerbosityLevelForData,
  LoggersUpdateVerbosityLevelForResponses,
  LoggersUpdateVerbosityLevelResponses,
  MetricsData,
  MetricsResponses,
  MfaAdminDestroyTotpSecretData,
  MfaAdminDestroyTotpSecretResponses,
  MfaAdminGenerateTotpSecretData,
  MfaAdminGenerateTotpSecretResponses,
  MfaConfigureDuoMethodData,
  MfaConfigureDuoMethodResponses,
  MfaConfigureOktaMethodData,
  MfaConfigureOktaMethodResponses,
  MfaConfigurePingIdMethodData,
  MfaConfigurePingIdMethodResponses,
  MfaConfigureTotpMethodData,
  MfaConfigureTotpMethodResponses,
  MfaDeleteDuoMethodData,
  MfaDeleteDuoMethodResponses,
  MfaDeleteLoginEnforcementData,
  MfaDeleteLoginEnforcementResponses,
  MfaDeleteOktaMethodData,
  MfaDeleteOktaMethodResponses,
  MfaDeletePingIdMethodData,
  MfaDeletePingIdMethodResponses,
  MfaDeleteTotpMethodData,
  MfaDeleteTotpMethodResponses,
  MfaGenerateTotpSecretData,
  MfaGenerateTotpSecretResponses,
  MfaListDuoMethodsData,
  MfaListDuoMethodsResponses,
  MfaListLoginEnforcementsData,
  MfaListLoginEnforcementsResponses,
  MfaListMethodsData,
  MfaListMethodsResponses,
  MfaListOktaMethodsData,
  MfaListOktaMethodsResponses,
  MfaListPingIdMethodsData,
  MfaListPingIdMethodsResponses,
  MfaListTotpMethodsData,
  MfaListTotpMethodsResponses,
  MfaReadDuoMethodConfigurationData,
  MfaReadDuoMethodConfigurationResponses,
  MfaReadLoginEnforcementData,
  MfaReadLoginEnforcementResponses,
  MfaReadMethodConfigurationData,
  MfaReadMethodConfigurationResponses,
  MfaReadOktaMethodConfigurationData,
  MfaReadOktaMethodConfigurationResponses,
  MfaReadPingIdMethodConfigurationData,
  MfaReadPingIdMethodConfigurationResponses,
  MfaReadTotpMethodConfigurationData,
  MfaReadTotpMethodConfigurationResponses,
  MfaValidateData,
  MfaValidateResponses,
  MfaWriteLoginEnforcementData,
  MfaWriteLoginEnforcementResponses,
  MonitorData,
  MonitorResponses,
  MountsDisableSecretsEngineData,
  MountsDisableSecretsEngineResponses,
  MountsEnableSecretsEngineData,
  MountsEnableSecretsEngineResponses,
  MountsListSecretsEnginesData,
  MountsListSecretsEnginesResponses,
  MountsReadConfigurationData,
  MountsReadConfigurationResponses,
  MountsReadTuningInformationData,
  MountsReadTuningInformationResponses,
  MountsTuneConfigurationParametersData,
  MountsTuneConfigurationParametersResponses,
  NamespacesDeleteNamespacesPathData,
  NamespacesDeleteNamespacesPathResponses,
  NamespacesListNamespacesData,
  NamespacesListNamespacesResponses,
  NamespacesReadNamespacesPathData,
  NamespacesReadNamespacesPathResponses,
  NamespacesWriteNamespacesApiLockLockData,
  NamespacesWriteNamespacesApiLockLockPathData,
  NamespacesWriteNamespacesApiLockLockPathResponses,
  NamespacesWriteNamespacesApiLockLockResponses,
  NamespacesWriteNamespacesApiLockUnlockData,
  NamespacesWriteNamespacesApiLockUnlockPathData,
  NamespacesWriteNamespacesApiLockUnlockPathResponses,
  NamespacesWriteNamespacesApiLockUnlockResponses,
  NamespacesWriteNamespacesPathData,
  NamespacesWriteNamespacesPathResponses,
  OidcConfigureData,
  OidcConfigureResponses,
  OidcDeleteAssignmentData,
  OidcDeleteAssignmentResponses,
  OidcDeleteClientData,
  OidcDeleteClientResponses,
  OidcDeleteKeyData,
  OidcDeleteKeyResponses,
  OidcDeleteProviderData,
  OidcDeleteProviderResponses,
  OidcDeleteRoleData,
  OidcDeleteRoleResponses,
  OidcDeleteScopeData,
  OidcDeleteScopeResponses,
  OidcGenerateTokenData,
  OidcGenerateTokenResponses,
  OidcIntrospectData,
  OidcIntrospectResponses,
  OidcListAssignmentsData,
  OidcListAssignmentsResponses,
  OidcListClientsData,
  OidcListClientsResponses,
  OidcListKeysData,
  OidcListKeysResponses,
  OidcListProvidersData,
  OidcListProvidersResponses,
  OidcListRolesData,
  OidcListRolesResponses,
  OidcListScopesData,
  OidcListScopesResponses,
  OidcProviderAuthorizeData,
  OidcProviderAuthorizeResponses,
  OidcProviderAuthorizeWithParametersData,
  OidcProviderAuthorizeWithParametersResponses,
  OidcProviderTokenData,
  OidcProviderTokenResponses,
  OidcProviderUserInfo2Data,
  OidcProviderUserInfo2Responses,
  OidcProviderUserInfoData,
  OidcProviderUserInfoResponses,
  OidcReadAssignmentData,
  OidcReadAssignmentResponses,
  OidcReadClientData,
  OidcReadClientResponses,
  OidcReadConfigurationData,
  OidcReadConfigurationResponses,
  OidcReadKeyData,
  OidcReadKeyResponses,
  OidcReadOpenIdConfigurationData,
  OidcReadOpenIdConfigurationResponses,
  OidcReadProviderData,
  OidcReadProviderOpenIdConfigurationData,
  OidcReadProviderOpenIdConfigurationResponses,
  OidcReadProviderPublicKeysData,
  OidcReadProviderPublicKeysResponses,
  OidcReadProviderResponses,
  OidcReadPublicKeysData,
  OidcReadPublicKeysResponses,
  OidcReadRoleData,
  OidcReadRoleResponses,
  OidcReadScopeData,
  OidcReadScopeResponses,
  OidcRotateKeyData,
  OidcRotateKeyResponses,
  OidcWriteAssignmentData,
  OidcWriteAssignmentResponses,
  OidcWriteClientData,
  OidcWriteClientResponses,
  OidcWriteKeyData,
  OidcWriteKeyResponses,
  OidcWriteProviderData,
  OidcWriteProviderResponses,
  OidcWriteRoleData,
  OidcWriteRoleResponses,
  OidcWriteScopeData,
  OidcWriteScopeResponses,
  PersonaCreateData,
  PersonaCreateResponses,
  PersonaDeleteByIdData,
  PersonaDeleteByIdResponses,
  PersonaListByIdData,
  PersonaListByIdResponses,
  PersonaReadByIdData,
  PersonaReadByIdResponses,
  PersonaUpdateByIdData,
  PersonaUpdateByIdResponses,
  PluginsCatalogListPluginsData,
  PluginsCatalogListPluginsResponses,
  PluginsCatalogListPluginsWithTypeData,
  PluginsCatalogListPluginsWithTypeResponses,
  PluginsCatalogReadPluginConfigurationData,
  PluginsCatalogReadPluginConfigurationResponses,
  PluginsCatalogReadPluginConfigurationWithTypeData,
  PluginsCatalogReadPluginConfigurationWithTypeResponses,
  PluginsCatalogRegisterPluginData,
  PluginsCatalogRegisterPluginResponses,
  PluginsCatalogRegisterPluginWithTypeData,
  PluginsCatalogRegisterPluginWithTypeResponses,
  PluginsCatalogRemovePluginData,
  PluginsCatalogRemovePluginResponses,
  PluginsCatalogRemovePluginWithTypeData,
  PluginsCatalogRemovePluginWithTypeResponses,
  PluginsReloadBackendsData,
  PluginsReloadBackendsResponses,
  PoliciesDeleteAclPolicy2Data,
  PoliciesDeleteAclPolicy2Responses,
  PoliciesDeleteAclPolicyData,
  PoliciesDeleteAclPolicyResponses,
  PoliciesDeletePasswordPolicyData,
  PoliciesDeletePasswordPolicyResponses,
  PoliciesGeneratePasswordFromPasswordPolicyData,
  PoliciesGeneratePasswordFromPasswordPolicyResponses,
  PoliciesListAclPoliciesData,
  PoliciesListAclPoliciesResponses,
  PoliciesListData,
  PoliciesListPasswordPoliciesData,
  PoliciesListPasswordPoliciesResponses,
  PoliciesListResponses,
  PoliciesReadAclPolicy2Data,
  PoliciesReadAclPolicy2Responses,
  PoliciesReadAclPolicyData,
  PoliciesReadAclPolicyResponses,
  PoliciesReadPasswordPolicyData,
  PoliciesReadPasswordPolicyResponses,
  PoliciesWriteAclPolicy2Data,
  PoliciesWriteAclPolicy2Responses,
  PoliciesWriteAclPolicyData,
  PoliciesWriteAclPolicyResponses,
  PoliciesWritePasswordPolicyData,
  PoliciesWritePasswordPolicyResponses,
  PprofBlockingData,
  PprofBlockingResponses,
  PprofCommandLineData,
  PprofCommandLineResponses,
  PprofCpuProfileData,
  PprofCpuProfileResponses,
  PprofExecutionTraceData,
  PprofExecutionTraceResponses,
  PprofGoroutinesData,
  PprofGoroutinesResponses,
  PprofIndexData,
  PprofIndexResponses,
  PprofMemoryAllocationsData,
  PprofMemoryAllocationsLiveData,
  PprofMemoryAllocationsLiveResponses,
  PprofMemoryAllocationsResponses,
  PprofMutexesData,
  PprofMutexesResponses,
  PprofSymbolsData,
  PprofSymbolsResponses,
  PprofThreadCreationsData,
  PprofThreadCreationsResponses,
  QueryTokenAccessorCapabilitiesData,
  QueryTokenAccessorCapabilitiesResponses,
  QueryTokenCapabilitiesData,
  QueryTokenCapabilitiesResponses,
  QueryTokenSelfCapabilitiesData,
  QueryTokenSelfCapabilitiesResponses,
  RateLimitQuotasConfigureData,
  RateLimitQuotasConfigureResponses,
  RateLimitQuotasDeleteData,
  RateLimitQuotasDeleteResponses,
  RateLimitQuotasListData,
  RateLimitQuotasListResponses,
  RateLimitQuotasReadConfigurationData,
  RateLimitQuotasReadConfigurationResponses,
  RateLimitQuotasReadData,
  RateLimitQuotasReadResponses,
  RateLimitQuotasWriteData,
  RateLimitQuotasWriteResponses,
  RawDeleteData,
  RawDeletePathData,
  RawDeletePathResponses,
  RawDeleteResponses,
  RawReadData,
  RawReadPathData,
  RawReadPathResponses,
  RawReadResponses,
  RawWriteData,
  RawWritePathData,
  RawWritePathResponses,
  RawWriteResponses,
  ReadHealthStatusData,
  ReadHealthStatusErrors,
  ReadHealthStatusResponses,
  ReadInitializationStatusData,
  ReadInitializationStatusResponses,
  ReadSanitizedConfigurationStateData,
  ReadSanitizedConfigurationStateResponses,
  ReadWrappingProperties2Data,
  ReadWrappingProperties2Responses,
  ReadWrappingPropertiesData,
  ReadWrappingPropertiesResponses,
  RekeyAttemptCancelData,
  RekeyAttemptCancelResponses,
  RekeyAttemptInitializeData,
  RekeyAttemptInitializeResponses,
  RekeyAttemptReadProgressData,
  RekeyAttemptReadProgressResponses,
  RekeyAttemptUpdateData,
  RekeyAttemptUpdateResponses,
  RekeyDeleteBackupKeyData,
  RekeyDeleteBackupKeyResponses,
  RekeyDeleteBackupRecoveryKeyData,
  RekeyDeleteBackupRecoveryKeyResponses,
  RekeyReadBackupKeyData,
  RekeyReadBackupKeyResponses,
  RekeyReadBackupRecoveryKeyData,
  RekeyReadBackupRecoveryKeyResponses,
  RekeyVerificationCancelData,
  RekeyVerificationCancelResponses,
  RekeyVerificationReadProgressData,
  RekeyVerificationReadProgressResponses,
  RekeyVerificationUpdateData,
  RekeyVerificationUpdateResponses,
  ReloadSubsystemData,
  ReloadSubsystemResponses,
  RemountData,
  RemountResponses,
  RemountStatusData,
  RemountStatusResponses,
  RewrapData,
  RewrapResponses,
  RootKeyRotateData,
  RootKeyRotateResponses,
  RootTokenGenerationCancel2Data,
  RootTokenGenerationCancel2Responses,
  RootTokenGenerationCancelData,
  RootTokenGenerationCancelResponses,
  RootTokenGenerationInitialize2Data,
  RootTokenGenerationInitialize2Responses,
  RootTokenGenerationInitializeData,
  RootTokenGenerationInitializeResponses,
  RootTokenGenerationReadProgress2Data,
  RootTokenGenerationReadProgress2Responses,
  RootTokenGenerationReadProgressData,
  RootTokenGenerationReadProgressResponses,
  RootTokenGenerationUpdateData,
  RootTokenGenerationUpdateResponses,
  RotateAttemptCancelData,
  RotateAttemptCancelResponses,
  RotateAttemptCancelRotateRecoveryInitData,
  RotateAttemptCancelRotateRecoveryInitResponses,
  RotateAttemptInitializeData,
  RotateAttemptInitializeResponses,
  RotateAttemptInitializeRotateRecoveryInitData,
  RotateAttemptInitializeRotateRecoveryInitResponses,
  RotateAttemptReadProgressData,
  RotateAttemptReadProgressResponses,
  RotateAttemptReadRotateRecoveryInitData,
  RotateAttemptReadRotateRecoveryInitResponses,
  RotateAttemptUpdateData,
  RotateAttemptUpdateResponses,
  RotateAttemptUpdateRotateRecoveryUpdateData,
  RotateAttemptUpdateRotateRecoveryUpdateResponses,
  RotateDeleteBackupKeyData,
  RotateDeleteBackupKeyResponses,
  RotateDeleteRotateRecoveryBackupData,
  RotateDeleteRotateRecoveryBackupResponses,
  RotateReadBackupKeyData,
  RotateReadBackupKeyResponses,
  RotateReadRotateRecoveryBackupData,
  RotateReadRotateRecoveryBackupResponses,
  RotateVerificationCancelData,
  RotateVerificationCancelResponses,
  RotateVerificationCancelRotateRecoveryVerifyData,
  RotateVerificationCancelRotateRecoveryVerifyResponses,
  RotateVerificationReadProgressData,
  RotateVerificationReadProgressResponses,
  RotateVerificationReadRotateRecoveryVerifyData,
  RotateVerificationReadRotateRecoveryVerifyResponses,
  RotateVerificationUpdateData,
  RotateVerificationUpdateResponses,
  RotateVerificationUpdateRotateRecoveryVerifyData,
  RotateVerificationUpdateRotateRecoveryVerifyResponses,
  SealData,
  SealResponses,
  SealStatusData,
  SealStatusResponses,
  StepDownLeaderData,
  StepDownLeaderResponses,
  SystemListPoliciesDetailedAclData,
  SystemListPoliciesDetailedAclResponses,
  TokenCreateAgainstRoleData,
  TokenCreateAgainstRoleResponses,
  TokenCreateData,
  TokenCreateOrphanData,
  TokenCreateOrphanResponses,
  TokenCreateResponses,
  TokenDeleteRoleData,
  TokenDeleteRoleResponses,
  TokenListAccessorsData,
  TokenListAccessorsResponses,
  TokenListRolesData,
  TokenListRolesResponses,
  TokenLookUpByAccessorData,
  TokenLookUpByAccessorResponses,
  TokenLookUpGetData,
  TokenLookUpGetResponses,
  TokenLookUpPostData,
  TokenLookUpPostResponses,
  TokenLookUpSelfGetData,
  TokenLookUpSelfGetResponses,
  TokenLookUpSelfPostData,
  TokenLookUpSelfPostResponses,
  TokenReadRoleData,
  TokenReadRoleResponses,
  TokenRenewAccessorData,
  TokenRenewAccessorResponses,
  TokenRenewData,
  TokenRenewResponses,
  TokenRenewSelfData,
  TokenRenewSelfResponses,
  TokenRevokeAccessorData,
  TokenRevokeAccessorResponses,
  TokenRevokeData,
  TokenRevokeOrphanData,
  TokenRevokeOrphanResponses,
  TokenRevokeResponses,
  TokenRevokeSelfData,
  TokenRevokeSelfResponses,
  TokenTidyData,
  TokenTidyResponses,
  TokenWriteRoleData,
  TokenWriteRoleResponses,
  UiHeadersConfigureData,
  UiHeadersConfigureResponses,
  UiHeadersDeleteConfigurationData,
  UiHeadersDeleteConfigurationResponses,
  UiHeadersListData,
  UiHeadersListResponses,
  UiHeadersReadConfigurationData,
  UiHeadersReadConfigurationResponses,
  UnsealData,
  UnsealResponses,
  UnwrapData,
  UnwrapResponses,
  VersionHistoryData,
  VersionHistoryResponses,
  WrapData,
  WrapResponses,
} from './types.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires 'sudo' capability in addition to 'list'.
 */
export const tokenListAccessors = <ThrowOnError extends boolean = false>(
  options: Options<TokenListAccessorsData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    TokenListAccessorsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/accessors',
    ...options,
  });
};

/**
 * The token create path is used to create new tokens.
 */
export const tokenCreate = <ThrowOnError extends boolean = false>(
  options: Options<TokenCreateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    TokenCreateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/create',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * The token create path is used to create new orphan tokens.
 */
export const tokenCreateOrphan = <ThrowOnError extends boolean = false>(
  options: Options<TokenCreateOrphanData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    TokenCreateOrphanResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/create-orphan',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * This token create path is used to create new tokens adhering to the given role.
 */
export const tokenCreateAgainstRole = <ThrowOnError extends boolean = false>(
  options: Options<TokenCreateAgainstRoleData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    TokenCreateAgainstRoleResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/create/{role_name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * This endpoint will lookup a token and its properties.
 */
export const tokenLookUpGet = <ThrowOnError extends boolean = false>(
  options?: Options<TokenLookUpGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TokenLookUpGetResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/lookup',
    ...options,
  });
};

/**
 * This endpoint will lookup a token and its properties.
 */
export const tokenLookUpPost = <ThrowOnError extends boolean = false>(
  options: Options<TokenLookUpPostData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    TokenLookUpPostResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/lookup',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.
 */
export const tokenLookUpByAccessor = <ThrowOnError extends boolean = false>(
  options: Options<TokenLookUpByAccessorData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    TokenLookUpByAccessorResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/lookup-accessor',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * This endpoint will lookup a token and its properties.
 */
export const tokenLookUpSelfGet = <ThrowOnError extends boolean = false>(
  options?: Options<TokenLookUpSelfGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TokenLookUpSelfGetResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/lookup-self',
    ...options,
  });
};

/**
 * This endpoint will lookup a token and its properties.
 */
export const tokenLookUpSelfPost = <ThrowOnError extends boolean = false>(
  options: Options<TokenLookUpSelfPostData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    TokenLookUpSelfPostResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/lookup-self',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * This endpoint will renew the given token and prevent expiration.
 */
export const tokenRenew = <ThrowOnError extends boolean = false>(
  options: Options<TokenRenewData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    TokenRenewResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/renew',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.
 */
export const tokenRenewAccessor = <ThrowOnError extends boolean = false>(
  options: Options<TokenRenewAccessorData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    TokenRenewAccessorResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/renew-accessor',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * This endpoint will renew the token used to call it and prevent expiration.
 */
export const tokenRenewSelf = <ThrowOnError extends boolean = false>(
  options: Options<TokenRenewSelfData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    TokenRenewSelfResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/renew-self',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * This endpoint will delete the given token and all of its child tokens.
 */
export const tokenRevoke = <ThrowOnError extends boolean = false>(
  options: Options<TokenRevokeData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    TokenRevokeResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/revoke',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * This endpoint will delete the token associated with the accessor and all of its child tokens.
 */
export const tokenRevokeAccessor = <ThrowOnError extends boolean = false>(
  options: Options<TokenRevokeAccessorData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    TokenRevokeAccessorResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/revoke-accessor',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * This endpoint will delete the token and orphan its child tokens.
 */
export const tokenRevokeOrphan = <ThrowOnError extends boolean = false>(
  options: Options<TokenRevokeOrphanData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    TokenRevokeOrphanResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/revoke-orphan',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * This endpoint will delete the token used to call it and all of its child tokens.
 */
export const tokenRevokeSelf = <ThrowOnError extends boolean = false>(
  options?: Options<TokenRevokeSelfData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    TokenRevokeSelfResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/revoke-self',
    ...options,
  });
};

/**
 * This endpoint lists configured roles.
 */
export const tokenListRoles = <ThrowOnError extends boolean = false>(
  options: Options<TokenListRolesData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    TokenListRolesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/roles',
    ...options,
  });
};

export const tokenDeleteRole = <ThrowOnError extends boolean = false>(
  options: Options<TokenDeleteRoleData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    TokenDeleteRoleResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/roles/{role_name}',
    ...options,
  });
};

export const tokenReadRole = <ThrowOnError extends boolean = false>(
  options: Options<TokenReadRoleData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    TokenReadRoleResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/roles/{role_name}',
    ...options,
  });
};

export const tokenWriteRole = <ThrowOnError extends boolean = false>(
  options: Options<TokenWriteRoleData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    TokenWriteRoleResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/roles/{role_name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.
 */
export const tokenTidy = <ThrowOnError extends boolean = false>(
  options?: Options<TokenTidyData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    TokenTidyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/token/tidy',
    ...options,
  });
};

/**
 * Deletes the secret at the specified location.
 * Pass-through secret storage to a token-specific cubbyhole in the storage backend, allowing you to read/write arbitrary data into secret storage.
 */
export const cubbyholeDelete = <ThrowOnError extends boolean = false>(
  options: Options<CubbyholeDeleteData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    CubbyholeDeleteResponses,
    unknown,
    ThrowOnError
  >({
    url: '/cubbyhole/{path}',
    ...options,
  });
};

/**
 * Retrieve the secret at the specified location.
 * Pass-through secret storage to a token-specific cubbyhole in the storage backend, allowing you to read/write arbitrary data into secret storage.
 */
export const cubbyholeRead = <ThrowOnError extends boolean = false>(
  options: Options<CubbyholeReadData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    CubbyholeReadResponses,
    unknown,
    ThrowOnError
  >({
    url: '/cubbyhole/{path}',
    ...options,
  });
};

/**
 * Store a secret at the specified location.
 * Pass-through secret storage to a token-specific cubbyhole in the storage backend, allowing you to read/write arbitrary data into secret storage.
 */
export const cubbyholeWrite = <ThrowOnError extends boolean = false>(
  options: Options<CubbyholeWriteData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CubbyholeWriteResponses,
    unknown,
    ThrowOnError
  >({
    url: '/cubbyhole/{path}',
    ...options,
  });
};

/**
 * Create a new alias.
 */
export const aliasCreate = <ThrowOnError extends boolean = false>(
  options: Options<AliasCreateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    AliasCreateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/alias',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List all the alias IDs.
 */
export const aliasListById = <ThrowOnError extends boolean = false>(
  options: Options<AliasListByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    AliasListByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/alias/id',
    ...options,
  });
};

/**
 * Update, read or delete an alias ID.
 */
export const aliasDeleteById = <ThrowOnError extends boolean = false>(
  options: Options<AliasDeleteByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    AliasDeleteByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/alias/id/{id}',
    ...options,
  });
};

/**
 * Update, read or delete an alias ID.
 */
export const aliasReadById = <ThrowOnError extends boolean = false>(
  options: Options<AliasReadByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    AliasReadByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/alias/id/{id}',
    ...options,
  });
};

/**
 * Update, read or delete an alias ID.
 */
export const aliasUpdateById = <ThrowOnError extends boolean = false>(
  options: Options<AliasUpdateByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    AliasUpdateByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/alias/id/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Create a new entity
 */
export const entityCreate = <ThrowOnError extends boolean = false>(
  options: Options<EntityCreateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    EntityCreateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Create a new alias.
 */
export const entityCreateAlias = <ThrowOnError extends boolean = false>(
  options: Options<EntityCreateAliasData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    EntityCreateAliasResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity-alias',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List all the alias IDs.
 */
export const entityListAliasesById = <ThrowOnError extends boolean = false>(
  options: Options<EntityListAliasesByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    EntityListAliasesByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity-alias/id',
    ...options,
  });
};

/**
 * Update, read or delete an alias ID.
 */
export const entityDeleteAliasById = <ThrowOnError extends boolean = false>(
  options: Options<EntityDeleteAliasByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    EntityDeleteAliasByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity-alias/id/{id}',
    ...options,
  });
};

/**
 * Update, read or delete an alias ID.
 */
export const entityReadAliasById = <ThrowOnError extends boolean = false>(
  options: Options<EntityReadAliasByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    EntityReadAliasByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity-alias/id/{id}',
    ...options,
  });
};

/**
 * Update, read or delete an alias ID.
 */
export const entityUpdateAliasById = <ThrowOnError extends boolean = false>(
  options: Options<EntityUpdateAliasByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    EntityUpdateAliasByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity-alias/id/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete all of the entities provided
 */
export const entityBatchDelete = <ThrowOnError extends boolean = false>(
  options: Options<EntityBatchDeleteData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    EntityBatchDeleteResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity/batch-delete',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List all the entity IDs
 */
export const entityListById = <ThrowOnError extends boolean = false>(
  options: Options<EntityListByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    EntityListByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity/id',
    ...options,
  });
};

/**
 * Update, read or delete an entity using entity ID
 */
export const entityDeleteById = <ThrowOnError extends boolean = false>(
  options: Options<EntityDeleteByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    EntityDeleteByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity/id/{id}',
    ...options,
  });
};

/**
 * Update, read or delete an entity using entity ID
 */
export const entityReadById = <ThrowOnError extends boolean = false>(
  options: Options<EntityReadByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    EntityReadByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity/id/{id}',
    ...options,
  });
};

/**
 * Update, read or delete an entity using entity ID
 */
export const entityUpdateById = <ThrowOnError extends boolean = false>(
  options: Options<EntityUpdateByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    EntityUpdateByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity/id/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Merge two or more entities together
 */
export const entityMerge = <ThrowOnError extends boolean = false>(
  options: Options<EntityMergeData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    EntityMergeResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity/merge',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List all the entity names
 */
export const entityListByName = <ThrowOnError extends boolean = false>(
  options: Options<EntityListByNameData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    EntityListByNameResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity/name',
    ...options,
  });
};

/**
 * Update, read or delete an entity using entity name
 */
export const entityDeleteByName = <ThrowOnError extends boolean = false>(
  options: Options<EntityDeleteByNameData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    EntityDeleteByNameResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity/name/{name}',
    ...options,
  });
};

/**
 * Update, read or delete an entity using entity name
 */
export const entityReadByName = <ThrowOnError extends boolean = false>(
  options: Options<EntityReadByNameData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    EntityReadByNameResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity/name/{name}',
    ...options,
  });
};

/**
 * Update, read or delete an entity using entity name
 */
export const entityUpdateByName = <ThrowOnError extends boolean = false>(
  options: Options<EntityUpdateByNameData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    EntityUpdateByNameResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/entity/name/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Create a new group.
 */
export const groupCreate = <ThrowOnError extends boolean = false>(
  options: Options<GroupCreateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    GroupCreateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/group',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Creates a new group alias, or updates an existing one.
 */
export const groupCreateAlias = <ThrowOnError extends boolean = false>(
  options: Options<GroupCreateAliasData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    GroupCreateAliasResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/group-alias',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List all the group alias IDs.
 */
export const groupListAliasesById = <ThrowOnError extends boolean = false>(
  options: Options<GroupListAliasesByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GroupListAliasesByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/group-alias/id',
    ...options,
  });
};

export const groupDeleteAliasById = <ThrowOnError extends boolean = false>(
  options: Options<GroupDeleteAliasByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    GroupDeleteAliasByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/group-alias/id/{id}',
    ...options,
  });
};

export const groupReadAliasById = <ThrowOnError extends boolean = false>(
  options: Options<GroupReadAliasByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GroupReadAliasByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/group-alias/id/{id}',
    ...options,
  });
};

export const groupUpdateAliasById = <ThrowOnError extends boolean = false>(
  options: Options<GroupUpdateAliasByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    GroupUpdateAliasByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/group-alias/id/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List all the group IDs.
 */
export const groupListById = <ThrowOnError extends boolean = false>(
  options: Options<GroupListByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GroupListByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/group/id',
    ...options,
  });
};

/**
 * Update or delete an existing group using its ID.
 */
export const groupDeleteById = <ThrowOnError extends boolean = false>(
  options: Options<GroupDeleteByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    GroupDeleteByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/group/id/{id}',
    ...options,
  });
};

/**
 * Update or delete an existing group using its ID.
 */
export const groupReadById = <ThrowOnError extends boolean = false>(
  options: Options<GroupReadByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GroupReadByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/group/id/{id}',
    ...options,
  });
};

/**
 * Update or delete an existing group using its ID.
 */
export const groupUpdateById = <ThrowOnError extends boolean = false>(
  options: Options<GroupUpdateByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    GroupUpdateByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/group/id/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const groupListByName = <ThrowOnError extends boolean = false>(
  options: Options<GroupListByNameData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GroupListByNameResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/group/name',
    ...options,
  });
};

export const groupDeleteByName = <ThrowOnError extends boolean = false>(
  options: Options<GroupDeleteByNameData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    GroupDeleteByNameResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/group/name/{name}',
    ...options,
  });
};

export const groupReadByName = <ThrowOnError extends boolean = false>(
  options: Options<GroupReadByNameData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GroupReadByNameResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/group/name/{name}',
    ...options,
  });
};

export const groupUpdateByName = <ThrowOnError extends boolean = false>(
  options: Options<GroupUpdateByNameData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    GroupUpdateByNameResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/group/name/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Query entities based on various properties.
 */
export const entityLookUp = <ThrowOnError extends boolean = false>(
  options: Options<EntityLookUpData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    EntityLookUpResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/lookup/entity',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Query groups based on various properties.
 */
export const groupLookUp = <ThrowOnError extends boolean = false>(
  options: Options<GroupLookUpData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    GroupLookUpResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/lookup/group',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List login enforcements
 */
export const mfaListLoginEnforcements = <ThrowOnError extends boolean = false>(
  options: Options<MfaListLoginEnforcementsData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    MfaListLoginEnforcementsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/login-enforcement',
    ...options,
  });
};

/**
 * Delete a login enforcement
 */
export const mfaDeleteLoginEnforcement = <ThrowOnError extends boolean = false>(
  options: Options<MfaDeleteLoginEnforcementData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    MfaDeleteLoginEnforcementResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/login-enforcement/{name}',
    ...options,
  });
};

/**
 * Read the current login enforcement
 */
export const mfaReadLoginEnforcement = <ThrowOnError extends boolean = false>(
  options: Options<MfaReadLoginEnforcementData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    MfaReadLoginEnforcementResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/login-enforcement/{name}',
    ...options,
  });
};

/**
 * Create or update a login enforcement
 */
export const mfaWriteLoginEnforcement = <ThrowOnError extends boolean = false>(
  options: Options<MfaWriteLoginEnforcementData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    MfaWriteLoginEnforcementResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/login-enforcement/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List MFA method configurations for all MFA methods
 */
export const mfaListMethods = <ThrowOnError extends boolean = false>(
  options: Options<MfaListMethodsData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    MfaListMethodsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method',
    ...options,
  });
};

/**
 * List MFA method configurations for the given MFA method
 */
export const mfaListDuoMethods = <ThrowOnError extends boolean = false>(
  options: Options<MfaListDuoMethodsData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    MfaListDuoMethodsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/duo',
    ...options,
  });
};

/**
 * Delete a configuration for the given MFA method
 */
export const mfaDeleteDuoMethod = <ThrowOnError extends boolean = false>(
  options: Options<MfaDeleteDuoMethodData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    MfaDeleteDuoMethodResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/duo/{method_id}',
    ...options,
  });
};

/**
 * Read the current configuration for the given MFA method
 */
export const mfaReadDuoMethodConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MfaReadDuoMethodConfigurationData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    MfaReadDuoMethodConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/duo/{method_id}',
    ...options,
  });
};

/**
 * Update or create a configuration for the given MFA method
 */
export const mfaConfigureDuoMethod = <ThrowOnError extends boolean = false>(
  options: Options<MfaConfigureDuoMethodData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    MfaConfigureDuoMethodResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/duo/{method_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List MFA method configurations for the given MFA method
 */
export const mfaListOktaMethods = <ThrowOnError extends boolean = false>(
  options: Options<MfaListOktaMethodsData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    MfaListOktaMethodsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/okta',
    ...options,
  });
};

/**
 * Delete a configuration for the given MFA method
 */
export const mfaDeleteOktaMethod = <ThrowOnError extends boolean = false>(
  options: Options<MfaDeleteOktaMethodData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    MfaDeleteOktaMethodResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/okta/{method_id}',
    ...options,
  });
};

/**
 * Read the current configuration for the given MFA method
 */
export const mfaReadOktaMethodConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MfaReadOktaMethodConfigurationData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    MfaReadOktaMethodConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/okta/{method_id}',
    ...options,
  });
};

/**
 * Update or create a configuration for the given MFA method
 */
export const mfaConfigureOktaMethod = <ThrowOnError extends boolean = false>(
  options: Options<MfaConfigureOktaMethodData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    MfaConfigureOktaMethodResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/okta/{method_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List MFA method configurations for the given MFA method
 */
export const mfaListPingIdMethods = <ThrowOnError extends boolean = false>(
  options: Options<MfaListPingIdMethodsData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    MfaListPingIdMethodsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/pingid',
    ...options,
  });
};

/**
 * Delete a configuration for the given MFA method
 */
export const mfaDeletePingIdMethod = <ThrowOnError extends boolean = false>(
  options: Options<MfaDeletePingIdMethodData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    MfaDeletePingIdMethodResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/pingid/{method_id}',
    ...options,
  });
};

/**
 * Read the current configuration for the given MFA method
 */
export const mfaReadPingIdMethodConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MfaReadPingIdMethodConfigurationData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    MfaReadPingIdMethodConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/pingid/{method_id}',
    ...options,
  });
};

/**
 * Update or create a configuration for the given MFA method
 */
export const mfaConfigurePingIdMethod = <ThrowOnError extends boolean = false>(
  options: Options<MfaConfigurePingIdMethodData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    MfaConfigurePingIdMethodResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/pingid/{method_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List MFA method configurations for the given MFA method
 */
export const mfaListTotpMethods = <ThrowOnError extends boolean = false>(
  options: Options<MfaListTotpMethodsData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    MfaListTotpMethodsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/totp',
    ...options,
  });
};

/**
 * Destroys a TOTP secret for the given MFA method ID on the given entity
 */
export const mfaAdminDestroyTotpSecret = <ThrowOnError extends boolean = false>(
  options: Options<MfaAdminDestroyTotpSecretData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    MfaAdminDestroyTotpSecretResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/totp/admin-destroy',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Update or create TOTP secret for the given method ID on the given entity.
 */
export const mfaAdminGenerateTotpSecret = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MfaAdminGenerateTotpSecretData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    MfaAdminGenerateTotpSecretResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/totp/admin-generate',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Update or create TOTP secret for the given method ID on the given entity.
 */
export const mfaGenerateTotpSecret = <ThrowOnError extends boolean = false>(
  options: Options<MfaGenerateTotpSecretData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    MfaGenerateTotpSecretResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/totp/generate',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a configuration for the given MFA method
 */
export const mfaDeleteTotpMethod = <ThrowOnError extends boolean = false>(
  options: Options<MfaDeleteTotpMethodData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    MfaDeleteTotpMethodResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/totp/{method_id}',
    ...options,
  });
};

/**
 * Read the current configuration for the given MFA method
 */
export const mfaReadTotpMethodConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MfaReadTotpMethodConfigurationData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    MfaReadTotpMethodConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/totp/{method_id}',
    ...options,
  });
};

/**
 * Update or create a configuration for the given MFA method
 */
export const mfaConfigureTotpMethod = <ThrowOnError extends boolean = false>(
  options: Options<MfaConfigureTotpMethodData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    MfaConfigureTotpMethodResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/totp/{method_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Read the current configuration for the given ID regardless of the MFA method type
 */
export const mfaReadMethodConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MfaReadMethodConfigurationData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    MfaReadMethodConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/mfa/method/{method_id}',
    ...options,
  });
};

/**
 * Retrieve public keys
 */
export const oidcReadPublicKeys = <ThrowOnError extends boolean = false>(
  options?: Options<OidcReadPublicKeysData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    OidcReadPublicKeysResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/.well-known/keys',
    ...options,
  });
};

/**
 * Query OIDC configurations
 */
export const oidcReadOpenIdConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<OidcReadOpenIdConfigurationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    OidcReadOpenIdConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/.well-known/openid-configuration',
    ...options,
  });
};

/**
 * List OIDC assignments
 */
export const oidcListAssignments = <ThrowOnError extends boolean = false>(
  options: Options<OidcListAssignmentsData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcListAssignmentsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/assignment',
    ...options,
  });
};

/**
 * CRUD operations for OIDC assignments.
 */
export const oidcDeleteAssignment = <ThrowOnError extends boolean = false>(
  options: Options<OidcDeleteAssignmentData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    OidcDeleteAssignmentResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/assignment/{name}',
    ...options,
  });
};

/**
 * CRUD operations for OIDC assignments.
 */
export const oidcReadAssignment = <ThrowOnError extends boolean = false>(
  options: Options<OidcReadAssignmentData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcReadAssignmentResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/assignment/{name}',
    ...options,
  });
};

/**
 * CRUD operations for OIDC assignments.
 */
export const oidcWriteAssignment = <ThrowOnError extends boolean = false>(
  options: Options<OidcWriteAssignmentData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    OidcWriteAssignmentResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/assignment/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List OIDC clients
 */
export const oidcListClients = <ThrowOnError extends boolean = false>(
  options: Options<OidcListClientsData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcListClientsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/client',
    ...options,
  });
};

/**
 * CRUD operations for OIDC clients.
 */
export const oidcDeleteClient = <ThrowOnError extends boolean = false>(
  options: Options<OidcDeleteClientData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    OidcDeleteClientResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/client/{name}',
    ...options,
  });
};

/**
 * CRUD operations for OIDC clients.
 */
export const oidcReadClient = <ThrowOnError extends boolean = false>(
  options: Options<OidcReadClientData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcReadClientResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/client/{name}',
    ...options,
  });
};

/**
 * CRUD operations for OIDC clients.
 */
export const oidcWriteClient = <ThrowOnError extends boolean = false>(
  options: Options<OidcWriteClientData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    OidcWriteClientResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/client/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * OIDC configuration
 */
export const oidcReadConfiguration = <ThrowOnError extends boolean = false>(
  options?: Options<OidcReadConfigurationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    OidcReadConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/config',
    ...options,
  });
};

/**
 * OIDC configuration
 */
export const oidcConfigure = <ThrowOnError extends boolean = false>(
  options: Options<OidcConfigureData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    OidcConfigureResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/config',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Verify the authenticity of an OIDC token
 */
export const oidcIntrospect = <ThrowOnError extends boolean = false>(
  options: Options<OidcIntrospectData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    OidcIntrospectResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/introspect',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List OIDC keys
 */
export const oidcListKeys = <ThrowOnError extends boolean = false>(
  options: Options<OidcListKeysData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcListKeysResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/key',
    ...options,
  });
};

/**
 * CRUD operations for OIDC keys.
 */
export const oidcDeleteKey = <ThrowOnError extends boolean = false>(
  options: Options<OidcDeleteKeyData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    OidcDeleteKeyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/key/{name}',
    ...options,
  });
};

/**
 * CRUD operations for OIDC keys.
 */
export const oidcReadKey = <ThrowOnError extends boolean = false>(
  options: Options<OidcReadKeyData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcReadKeyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/key/{name}',
    ...options,
  });
};

/**
 * CRUD operations for OIDC keys.
 */
export const oidcWriteKey = <ThrowOnError extends boolean = false>(
  options: Options<OidcWriteKeyData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    OidcWriteKeyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/key/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Rotate a named OIDC key.
 */
export const oidcRotateKey = <ThrowOnError extends boolean = false>(
  options: Options<OidcRotateKeyData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    OidcRotateKeyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/key/{name}/rotate',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List OIDC providers
 */
export const oidcListProviders = <ThrowOnError extends boolean = false>(
  options: Options<OidcListProvidersData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcListProvidersResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/provider',
    ...options,
  });
};

/**
 * CRUD operations for OIDC providers.
 */
export const oidcDeleteProvider = <ThrowOnError extends boolean = false>(
  options: Options<OidcDeleteProviderData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    OidcDeleteProviderResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/provider/{name}',
    ...options,
  });
};

/**
 * CRUD operations for OIDC providers.
 */
export const oidcReadProvider = <ThrowOnError extends boolean = false>(
  options: Options<OidcReadProviderData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcReadProviderResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/provider/{name}',
    ...options,
  });
};

/**
 * CRUD operations for OIDC providers.
 */
export const oidcWriteProvider = <ThrowOnError extends boolean = false>(
  options: Options<OidcWriteProviderData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    OidcWriteProviderResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/provider/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Retrieve public keys
 */
export const oidcReadProviderPublicKeys = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OidcReadProviderPublicKeysData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcReadProviderPublicKeysResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/provider/{name}/.well-known/keys',
    ...options,
  });
};

/**
 * Query OIDC configurations
 */
export const oidcReadProviderOpenIdConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OidcReadProviderOpenIdConfigurationData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcReadProviderOpenIdConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/provider/{name}/.well-known/openid-configuration',
    ...options,
  });
};

/**
 * Provides the OIDC Authorization Endpoint.
 */
export const oidcProviderAuthorize = <ThrowOnError extends boolean = false>(
  options: Options<OidcProviderAuthorizeData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcProviderAuthorizeResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/provider/{name}/authorize',
    ...options,
  });
};

/**
 * Provides the OIDC Authorization Endpoint.
 */
export const oidcProviderAuthorizeWithParameters = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OidcProviderAuthorizeWithParametersData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    OidcProviderAuthorizeWithParametersResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/provider/{name}/authorize',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Provides the OIDC Token Endpoint.
 */
export const oidcProviderToken = <ThrowOnError extends boolean = false>(
  options: Options<OidcProviderTokenData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    OidcProviderTokenResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/provider/{name}/token',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Provides the OIDC UserInfo Endpoint.
 */
export const oidcProviderUserInfo = <ThrowOnError extends boolean = false>(
  options: Options<OidcProviderUserInfoData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcProviderUserInfoResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/provider/{name}/userinfo',
    ...options,
  });
};

/**
 * Provides the OIDC UserInfo Endpoint.
 */
export const oidcProviderUserInfo2 = <ThrowOnError extends boolean = false>(
  options: Options<OidcProviderUserInfo2Data, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    OidcProviderUserInfo2Responses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/provider/{name}/userinfo',
    ...options,
  });
};

/**
 * List configured OIDC roles
 */
export const oidcListRoles = <ThrowOnError extends boolean = false>(
  options: Options<OidcListRolesData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcListRolesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/role',
    ...options,
  });
};

/**
 * CRUD operations on OIDC Roles
 */
export const oidcDeleteRole = <ThrowOnError extends boolean = false>(
  options: Options<OidcDeleteRoleData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    OidcDeleteRoleResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/role/{name}',
    ...options,
  });
};

/**
 * CRUD operations on OIDC Roles
 */
export const oidcReadRole = <ThrowOnError extends boolean = false>(
  options: Options<OidcReadRoleData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcReadRoleResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/role/{name}',
    ...options,
  });
};

/**
 * CRUD operations on OIDC Roles
 */
export const oidcWriteRole = <ThrowOnError extends boolean = false>(
  options: Options<OidcWriteRoleData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    OidcWriteRoleResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/role/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List OIDC scopes
 */
export const oidcListScopes = <ThrowOnError extends boolean = false>(
  options: Options<OidcListScopesData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcListScopesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/scope',
    ...options,
  });
};

/**
 * CRUD operations for OIDC scopes.
 */
export const oidcDeleteScope = <ThrowOnError extends boolean = false>(
  options: Options<OidcDeleteScopeData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    OidcDeleteScopeResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/scope/{name}',
    ...options,
  });
};

/**
 * CRUD operations for OIDC scopes.
 */
export const oidcReadScope = <ThrowOnError extends boolean = false>(
  options: Options<OidcReadScopeData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcReadScopeResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/scope/{name}',
    ...options,
  });
};

/**
 * CRUD operations for OIDC scopes.
 */
export const oidcWriteScope = <ThrowOnError extends boolean = false>(
  options: Options<OidcWriteScopeData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    OidcWriteScopeResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/scope/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Generate an OIDC token
 */
export const oidcGenerateToken = <ThrowOnError extends boolean = false>(
  options: Options<OidcGenerateTokenData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    OidcGenerateTokenResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/oidc/token/{name}',
    ...options,
  });
};

/**
 * Create a new alias.
 */
export const personaCreate = <ThrowOnError extends boolean = false>(
  options: Options<PersonaCreateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PersonaCreateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/persona',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List all the alias IDs.
 */
export const personaListById = <ThrowOnError extends boolean = false>(
  options: Options<PersonaListByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    PersonaListByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/persona/id',
    ...options,
  });
};

/**
 * Update, read or delete an alias ID.
 */
export const personaDeleteById = <ThrowOnError extends boolean = false>(
  options: Options<PersonaDeleteByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    PersonaDeleteByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/persona/id/{id}',
    ...options,
  });
};

/**
 * Update, read or delete an alias ID.
 */
export const personaReadById = <ThrowOnError extends boolean = false>(
  options: Options<PersonaReadByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    PersonaReadByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/persona/id/{id}',
    ...options,
  });
};

/**
 * Update, read or delete an alias ID.
 */
export const personaUpdateById = <ThrowOnError extends boolean = false>(
  options: Options<PersonaUpdateByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PersonaUpdateByIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/identity/persona/id/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List the enabled audit devices.
 * List the currently enabled audit backends.
 */
export const auditingListEnabledDevices = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<AuditingListEnabledDevicesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AuditingListEnabledDevicesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/audit',
    ...options,
  });
};

/**
 * The hash of the given string via the given audit backend
 */
export const auditingCalculateHash = <ThrowOnError extends boolean = false>(
  options: Options<AuditingCalculateHashData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    AuditingCalculateHashResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/audit-hash/{path}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Disable the audit device at the given path.
 * Enable or disable audit backends.
 */
export const auditingDisableDevice = <ThrowOnError extends boolean = false>(
  options: Options<AuditingDisableDeviceData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    AuditingDisableDeviceResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/audit/{path}',
    ...options,
  });
};

/**
 * Enable a new audit device at the supplied path.
 * Enable or disable audit backends.
 */
export const auditingEnableDevice = <ThrowOnError extends boolean = false>(
  options: Options<AuditingEnableDeviceData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    AuditingEnableDeviceResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/audit/{path}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List the currently enabled credential backends.
 */
export const authListEnabledMethods = <ThrowOnError extends boolean = false>(
  options?: Options<AuthListEnabledMethodsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AuthListEnabledMethodsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/auth',
    ...options,
  });
};

/**
 * Disable the auth method at the given auth path
 * Enable a new credential backend with a name.
 */
export const authDisableMethod = <ThrowOnError extends boolean = false>(
  options: Options<AuthDisableMethodData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    AuthDisableMethodResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/auth/{path}',
    ...options,
  });
};

/**
 * Read the configuration of the auth engine at the given path.
 * Enable a new credential backend with a name.
 */
export const authReadConfiguration = <ThrowOnError extends boolean = false>(
  options: Options<AuthReadConfigurationData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    AuthReadConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/auth/{path}',
    ...options,
  });
};

/**
 * Enables a new auth method.
 * After enabling, the auth method can be accessed and configured via the auth path specified as part of the URL. This auth path will be nested under the auth prefix.
 *
 * For example, enable the "foo" auth method will make it accessible at /auth/foo.
 */
export const authEnableMethod = <ThrowOnError extends boolean = false>(
  options: Options<AuthEnableMethodData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    AuthEnableMethodResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/auth/{path}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Reads the given auth path's configuration.
 * This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
 */
export const authReadTuningInformation = <ThrowOnError extends boolean = false>(
  options: Options<AuthReadTuningInformationData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    AuthReadTuningInformationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/auth/{path}/tune',
    ...options,
  });
};

/**
 * Tune configuration parameters for a given auth path.
 * This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
 */
export const authTuneConfigurationParameters = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthTuneConfigurationParametersData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    AuthTuneConfigurationParametersResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/auth/{path}/tune',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Fetches the capabilities of the given token on the given path.
 */
export const queryTokenCapabilities = <ThrowOnError extends boolean = false>(
  options: Options<QueryTokenCapabilitiesData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    QueryTokenCapabilitiesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/capabilities',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Fetches the capabilities of the token associated with the given token, on the given path.
 */
export const queryTokenAccessorCapabilities = <
  ThrowOnError extends boolean = false,
>(
  options: Options<QueryTokenAccessorCapabilitiesData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    QueryTokenAccessorCapabilitiesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/capabilities-accessor',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Fetches the capabilities of the given token on the given path.
 */
export const queryTokenSelfCapabilities = <
  ThrowOnError extends boolean = false,
>(
  options: Options<QueryTokenSelfCapabilitiesData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    QueryTokenSelfCapabilitiesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/capabilities-self',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List the request headers that are configured to be audited.
 * Lists the headers configured to be audited.
 */
export const auditingListRequestHeaders = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<AuditingListRequestHeadersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AuditingListRequestHeadersResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/config/auditing/request-headers',
    ...options,
  });
};

/**
 * Disable auditing of the given request header.
 * Configures the headers sent to the audit logs.
 */
export const auditingDisableRequestHeader = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuditingDisableRequestHeaderData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    AuditingDisableRequestHeaderResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/config/auditing/request-headers/{header}',
    ...options,
  });
};

/**
 * List the information for the given request header.
 * Configures the headers sent to the audit logs.
 */
export const auditingReadRequestHeaderInformation = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuditingReadRequestHeaderInformationData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    AuditingReadRequestHeaderInformationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/config/auditing/request-headers/{header}',
    ...options,
  });
};

/**
 * Enable auditing of a header.
 * Configures the headers sent to the audit logs.
 */
export const auditingEnableRequestHeader = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuditingEnableRequestHeaderData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    AuditingEnableRequestHeaderResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/config/auditing/request-headers/{header}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Remove any CORS settings.
 * This path responds to the following HTTP methods. GET / Returns the configuration of the CORS setting. POST / Sets the comma-separated list of origins that can make cross-origin requests. DELETE / Clears the CORS configuration and disables acceptance of CORS requests.
 */
export const corsDeleteConfiguration = <ThrowOnError extends boolean = false>(
  options?: Options<CorsDeleteConfigurationData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    CorsDeleteConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/config/cors',
    ...options,
  });
};

/**
 * Return the current CORS settings.
 * This path responds to the following HTTP methods. GET / Returns the configuration of the CORS setting. POST / Sets the comma-separated list of origins that can make cross-origin requests. DELETE / Clears the CORS configuration and disables acceptance of CORS requests.
 */
export const corsReadConfiguration = <ThrowOnError extends boolean = false>(
  options?: Options<CorsReadConfigurationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CorsReadConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/config/cors',
    ...options,
  });
};

/**
 * Configure the CORS settings.
 * This path responds to the following HTTP methods. GET / Returns the configuration of the CORS setting. POST / Sets the comma-separated list of origins that can make cross-origin requests. DELETE / Clears the CORS configuration and disables acceptance of CORS requests.
 */
export const corsConfigure = <ThrowOnError extends boolean = false>(
  options: Options<CorsConfigureData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    CorsConfigureResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/config/cors',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Reload the given subsystem
 */
export const reloadSubsystem = <ThrowOnError extends boolean = false>(
  options: Options<ReloadSubsystemData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    ReloadSubsystemResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/config/reload/{subsystem}',
    ...options,
  });
};

/**
 * Return a sanitized version of the OpenBao server configuration.
 * The sanitized output strips configuration values in the storage, HA storage, and seals stanzas, which may contain sensitive values such as API tokens. It also removes any token or secret fields in other stanzas, such as the circonus_api_token from telemetry.
 */
export const readSanitizedConfigurationState = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ReadSanitizedConfigurationStateData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadSanitizedConfigurationStateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/config/state/sanitized',
    ...options,
  });
};

/**
 * Return a list of configured UI headers.
 * This path responds to the following HTTP methods. GET /<header> Returns the header value. POST /<header> Sets the header value for the UI. DELETE /<header> Clears the header value for UI. LIST / List the headers configured for the UI.
 */
export const uiHeadersList = <ThrowOnError extends boolean = false>(
  options: Options<UiHeadersListData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    UiHeadersListResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/config/ui/headers',
    ...options,
  });
};

/**
 * Remove a UI header.
 * This path responds to the following HTTP methods. GET /<header> Returns the header value. POST /<header> Sets the header value for the UI. DELETE /<header> Clears the header value for UI. LIST / List the headers configured for the UI.
 */
export const uiHeadersDeleteConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UiHeadersDeleteConfigurationData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    UiHeadersDeleteConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/config/ui/headers/{header}',
    ...options,
  });
};

/**
 * Return the given UI header's configuration
 * This path responds to the following HTTP methods. GET /<header> Returns the header value. POST /<header> Sets the header value for the UI. DELETE /<header> Clears the header value for UI. LIST / List the headers configured for the UI.
 */
export const uiHeadersReadConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UiHeadersReadConfigurationData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    UiHeadersReadConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/config/ui/headers/{header}',
    ...options,
  });
};

/**
 * Configure the values to be returned for the UI header.
 * This path responds to the following HTTP methods. GET /<header> Returns the header value. POST /<header> Sets the header value for the UI. DELETE /<header> Clears the header value for UI. LIST / List the headers configured for the UI.
 */
export const uiHeadersConfigure = <ThrowOnError extends boolean = false>(
  options: Options<UiHeadersConfigureData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    UiHeadersConfigureResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/config/ui/headers/{header}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Decodes the encoded token with the otp.
 */
export const decode = <ThrowOnError extends boolean = false>(
  options: Options<DecodeData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    DecodeResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/decode-token',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Cancels any in-progress root generation attempt.
 * Reads, generates, or deletes a root token regeneration process.
 */
export const rootTokenGenerationCancel2 = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<RootTokenGenerationCancel2Data, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    RootTokenGenerationCancel2Responses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/generate-root',
    ...options,
  });
};

/**
 * Read the configuration and progress of the current root generation attempt.
 * Reads, generates, or deletes a root token regeneration process.
 */
export const rootTokenGenerationReadProgress2 = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<RootTokenGenerationReadProgress2Data, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RootTokenGenerationReadProgress2Responses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/generate-root',
    ...options,
  });
};

/**
 * Initializes a new root generation attempt.
 * Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.
 */
export const rootTokenGenerationInitialize2 = <
  ThrowOnError extends boolean = false,
>(
  options: Options<RootTokenGenerationInitialize2Data, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RootTokenGenerationInitialize2Responses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/generate-root',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Cancels any in-progress root generation attempt.
 * Reads, generates, or deletes a root token regeneration process.
 */
export const rootTokenGenerationCancel = <ThrowOnError extends boolean = false>(
  options?: Options<RootTokenGenerationCancelData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    RootTokenGenerationCancelResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/generate-root/attempt',
    ...options,
  });
};

/**
 * Read the configuration and progress of the current root generation attempt.
 * Reads, generates, or deletes a root token regeneration process.
 */
export const rootTokenGenerationReadProgress = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<RootTokenGenerationReadProgressData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RootTokenGenerationReadProgressResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/generate-root/attempt',
    ...options,
  });
};

/**
 * Initializes a new root generation attempt.
 * Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.
 */
export const rootTokenGenerationInitialize = <
  ThrowOnError extends boolean = false,
>(
  options: Options<RootTokenGenerationInitializeData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RootTokenGenerationInitializeResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/generate-root/attempt',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Enter a single unseal key share to progress the root generation attempt.
 * If the threshold number of unseal key shares is reached, OpenBao will complete the root generation and issue the new token. Otherwise, this API must be called multiple times until that threshold is met. The attempt nonce must be provided with each call.
 */
export const rootTokenGenerationUpdate = <ThrowOnError extends boolean = false>(
  options: Options<RootTokenGenerationUpdateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RootTokenGenerationUpdateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/generate-root/update',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Check the HA status of an OpenBao cluster
 * Provides information about the nodes in an HA cluster.
 */
export const haStatus = <ThrowOnError extends boolean = false>(
  options?: Options<HaStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    HaStatusResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/ha-status',
    ...options,
  });
};

/**
 * Returns the health status of OpenBao.
 * Checks the health status of OpenBao.
 */
export const readHealthStatus = <ThrowOnError extends boolean = false>(
  options?: Options<ReadHealthStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadHealthStatusResponses,
    ReadHealthStatusErrors,
    ThrowOnError
  >({
    url: '/sys/health',
    ...options,
  });
};

/**
 * Information about the host instance that this OpenBao server is running on.
 * Information about the host instance that this OpenBao server is running on.
 * The information that gets collected includes host hardware information, and CPU,
 * disk, and memory utilization
 */
export const collectHostInformation = <ThrowOnError extends boolean = false>(
  options?: Options<CollectHostInformationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CollectHostInformationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/host-info',
    ...options,
  });
};

/**
 * reports in-flight requests
 * This path responds to the following HTTP methods.
 * GET /
 * Returns a map of in-flight requests.
 */
export const collectInFlightRequestInformation = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<CollectInFlightRequestInformationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CollectInFlightRequestInformationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/in-flight-req',
    ...options,
  });
};

/**
 * Returns the initialization status of OpenBao.
 * Initializes or returns the initialization status of OpenBao.
 */
export const readInitializationStatus = <ThrowOnError extends boolean = false>(
  options?: Options<ReadInitializationStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadInitializationStatusResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/init',
    ...options,
  });
};

/**
 * Initialize a new OpenBao instance.
 * The OpenBao instance must not have been previously initialized. The recovery options, as well as the stored shares option, are only available when using OpenBao HSM.
 */
export const initializeSystem = <ThrowOnError extends boolean = false>(
  options: Options<InitializeSystemData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    InitializeSystemResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/init',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Backwards compatibility is not guaranteed for this API
 * Count of active entities in this OpenBao cluster.
 */
export const internalCountEntities = <ThrowOnError extends boolean = false>(
  options?: Options<InternalCountEntitiesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    InternalCountEntitiesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/internal/counters/entities',
    ...options,
  });
};

/**
 * Backwards compatibility is not guaranteed for this API
 * Currently unsupported. Previously, count of requests seen by this OpenBao cluster over time.
 * @deprecated
 */
export const internalCountRequests = <ThrowOnError extends boolean = false>(
  options?: Options<InternalCountRequestsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    InternalCountRequestsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/internal/counters/requests',
    ...options,
  });
};

/**
 * Backwards compatibility is not guaranteed for this API
 * Count of active tokens in this OpenBao cluster.
 */
export const internalCountTokens = <ThrowOnError extends boolean = false>(
  options?: Options<InternalCountTokensData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    InternalCountTokensResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/internal/counters/tokens',
    ...options,
  });
};

/**
 * Expose all request information to the caller
 * Outputs information contained within a request to a plugin.
 */
export const internalInspectRequest = <ThrowOnError extends boolean = false>(
  options?: Options<InternalInspectRequestData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    InternalInspectRequestResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/internal/inspect/request',
    ...options,
  });
};

/**
 * Expose the route entry and mount entry tables present in the router
 * Information on the entries in each of the trees in the router. Inspectable trees are uuid, accessor, storage, and root.
 */
export const internalInspectRouter = <ThrowOnError extends boolean = false>(
  options: Options<InternalInspectRouterData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    InternalInspectRouterResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/internal/inspect/router/{tag}',
    ...options,
  });
};

/**
 * Generate an OpenAPI 3 document of all mounted paths.
 */
export const internalGenerateOpenApiDocument = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<InternalGenerateOpenApiDocumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    InternalGenerateOpenApiDocumentResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/internal/specs/openapi',
    ...options,
  });
};

/**
 * Generate an OpenAPI 3 document of all mounted paths.
 */
export const internalGenerateOpenApiDocumentWithParameters = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    InternalGenerateOpenApiDocumentWithParametersData,
    ThrowOnError
  >,
) => {
  return (options.client ?? client).post<
    InternalGenerateOpenApiDocumentWithParametersResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/internal/specs/openapi',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Lists enabled feature flags.
 * Enabled feature flags. Internal API; its location, inputs, and outputs may change.
 */
export const internalUiListEnabledFeatureFlags = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<InternalUiListEnabledFeatureFlagsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    InternalUiListEnabledFeatureFlagsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/internal/ui/feature-flags',
    ...options,
  });
};

/**
 * Lists all enabled and visible auth and secrets mounts.
 * Information about mounts returned according to their tuned visibility. Internal API; its location, inputs, and outputs may change.
 */
export const internalUiListEnabledVisibleMounts = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<InternalUiListEnabledVisibleMountsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    InternalUiListEnabledVisibleMountsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/internal/ui/mounts',
    ...options,
  });
};

/**
 * Return information about the given mount.
 * Information about mounts returned according to their tuned visibility. Internal API; its location, inputs, and outputs may change.
 */
export const internalUiReadMountInformation = <
  ThrowOnError extends boolean = false,
>(
  options: Options<InternalUiReadMountInformationData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    InternalUiReadMountInformationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/internal/ui/mounts/{path}',
    ...options,
  });
};

/**
 * Backwards compatibility is not guaranteed for this API
 * Information about visible child namespaces. Internal API; its location, inputs, and outputs may change.
 */
export const internalUiListNamespaces = <ThrowOnError extends boolean = false>(
  options?: Options<InternalUiListNamespacesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    InternalUiListNamespacesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/internal/ui/namespaces',
    ...options,
  });
};

/**
 * Backwards compatibility is not guaranteed for this API
 * Information about a token's resultant ACL. Internal API; its location, inputs, and outputs may change.
 */
export const internalUiReadResultantAcl = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<InternalUiReadResultantAclData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    InternalUiReadResultantAclResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/internal/ui/resultant-acl',
    ...options,
  });
};

/**
 * Provides information about the backend encryption key.
 */
export const encryptionKeyStatus = <ThrowOnError extends boolean = false>(
  options?: Options<EncryptionKeyStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    EncryptionKeyStatusResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/key-status',
    ...options,
  });
};

/**
 * Returns the high availability status and current leader instance of OpenBao.
 * Check the high availability status and current leader of OpenBao
 */
export const leaderStatus = <ThrowOnError extends boolean = false>(
  options?: Options<LeaderStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    LeaderStatusResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/leader',
    ...options,
  });
};

/**
 * List leases associated with this OpenBao cluster
 */
export const leasesList = <ThrowOnError extends boolean = false>(
  options?: Options<LeasesListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    LeasesListResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/leases',
    ...options,
  });
};

/**
 * Count of leases associated with this OpenBao cluster
 */
export const leasesCount = <ThrowOnError extends boolean = false>(
  options?: Options<LeasesCountData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    LeasesCountResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/leases/count',
    ...options,
  });
};

/**
 * View or list lease metadata.
 */
export const leasesReadLease = <ThrowOnError extends boolean = false>(
  options: Options<LeasesReadLeaseData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LeasesReadLeaseResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/leases/lookup',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * View or list lease metadata.
 */
export const leasesLookUp = <ThrowOnError extends boolean = false>(
  options: Options<LeasesLookUpData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    LeasesLookUpResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/leases/lookup/',
    ...options,
  });
};

/**
 * View or list lease metadata.
 */
export const leasesLookUpWithPrefix = <ThrowOnError extends boolean = false>(
  options: Options<LeasesLookUpWithPrefixData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    LeasesLookUpWithPrefixResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/leases/lookup/{prefix}',
    ...options,
  });
};

/**
 * Renews a lease, requesting to extend the lease.
 * Renew a lease on a secret
 */
export const leasesRenewLease = <ThrowOnError extends boolean = false>(
  options: Options<LeasesRenewLeaseData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LeasesRenewLeaseResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/leases/renew',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Renews a lease, requesting to extend the lease.
 * Renew a lease on a secret
 */
export const leasesRenewLeaseWithId = <ThrowOnError extends boolean = false>(
  options: Options<LeasesRenewLeaseWithIdData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LeasesRenewLeaseWithIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/leases/renew/{url_lease_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Revokes a lease immediately.
 * Revoke a leased secret immediately
 */
export const leasesRevokeLease = <ThrowOnError extends boolean = false>(
  options: Options<LeasesRevokeLeaseData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LeasesRevokeLeaseResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/leases/revoke',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Revokes all secrets or tokens generated under a given prefix immediately
 * Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.
 *
 * By ignoring these errors, OpenBao abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
 */
export const leasesForceRevokeLeaseWithPrefix = <
  ThrowOnError extends boolean = false,
>(
  options: Options<LeasesForceRevokeLeaseWithPrefixData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LeasesForceRevokeLeaseWithPrefixResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/leases/revoke-force/{prefix}',
    ...options,
  });
};

/**
 * Revokes all secrets (via a lease ID prefix) or tokens (via the tokens' path property) generated under a given prefix immediately.
 * Revoke all secrets generated in a given prefix
 */
export const leasesRevokeLeaseWithPrefix = <
  ThrowOnError extends boolean = false,
>(
  options: Options<LeasesRevokeLeaseWithPrefixData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LeasesRevokeLeaseWithPrefixResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/leases/revoke-prefix/{prefix}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Revokes a lease immediately.
 * Revoke a leased secret immediately
 */
export const leasesRevokeLeaseWithId = <ThrowOnError extends boolean = false>(
  options: Options<LeasesRevokeLeaseWithIdData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LeasesRevokeLeaseWithIdResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/leases/revoke/{url_lease_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.
 */
export const leasesTidy = <ThrowOnError extends boolean = false>(
  options?: Options<LeasesTidyData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LeasesTidyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/leases/tidy',
    ...options,
  });
};

/**
 * Report the locked user count metrics, for this namespace and all child namespaces.
 * Report the locked user count metrics
 */
export const lockedUsersList = <ThrowOnError extends boolean = false>(
  options?: Options<LockedUsersListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    LockedUsersListResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/locked-users',
    ...options,
  });
};

/**
 * Unlocks the user with given mount_accessor and alias_identifier
 * Unlock the locked user with given mount_accessor and alias_identifier.
 */
export const lockedUsersUnlock = <ThrowOnError extends boolean = false>(
  options: Options<LockedUsersUnlockData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LockedUsersUnlockResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/locked-users/{mount_accessor}/unlock/{alias_identifier}',
    ...options,
  });
};

/**
 * Revert the all loggers to use log level provided in config.
 */
export const loggersRevertVerbosityLevel = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<LoggersRevertVerbosityLevelData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    LoggersRevertVerbosityLevelResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/loggers',
    ...options,
  });
};

/**
 * Read the log level for all existing loggers.
 */
export const loggersReadVerbosityLevel = <ThrowOnError extends boolean = false>(
  options?: Options<LoggersReadVerbosityLevelData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    LoggersReadVerbosityLevelResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/loggers',
    ...options,
  });
};

/**
 * Modify the log level for all existing loggers.
 */
export const loggersUpdateVerbosityLevel = <
  ThrowOnError extends boolean = false,
>(
  options: Options<LoggersUpdateVerbosityLevelData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LoggersUpdateVerbosityLevelResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/loggers',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Revert a single logger to use log level provided in config.
 */
export const loggersRevertVerbosityLevelFor = <
  ThrowOnError extends boolean = false,
>(
  options: Options<LoggersRevertVerbosityLevelForData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    LoggersRevertVerbosityLevelForResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/loggers/{name}',
    ...options,
  });
};

/**
 * Read the log level for a single logger.
 */
export const loggersReadVerbosityLevelFor = <
  ThrowOnError extends boolean = false,
>(
  options: Options<LoggersReadVerbosityLevelForData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    LoggersReadVerbosityLevelForResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/loggers/{name}',
    ...options,
  });
};

/**
 * Modify the log level of a single logger.
 */
export const loggersUpdateVerbosityLevelFor = <
  ThrowOnError extends boolean = false,
>(
  options: Options<LoggersUpdateVerbosityLevelForData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LoggersUpdateVerbosityLevelForResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/loggers/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Export the metrics aggregated for telemetry purpose.
 */
export const metrics = <ThrowOnError extends boolean = false>(
  options?: Options<MetricsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MetricsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/metrics',
    ...options,
  });
};

/**
 * Validates the login for the given MFA methods. Upon successful validation, it returns an auth response containing the client token
 */
export const mfaValidate = <ThrowOnError extends boolean = false>(
  options: Options<MfaValidateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    MfaValidateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/mfa/validate',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

export const monitor = <ThrowOnError extends boolean = false>(
  options?: Options<MonitorData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MonitorResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/monitor',
    ...options,
  });
};

/**
 * List the currently mounted backends.
 */
export const mountsListSecretsEngines = <ThrowOnError extends boolean = false>(
  options?: Options<MountsListSecretsEnginesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MountsListSecretsEnginesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/mounts',
    ...options,
  });
};

/**
 * Disable the mount point specified at the given path.
 * Mount a new backend at a new path.
 */
export const mountsDisableSecretsEngine = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MountsDisableSecretsEngineData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    MountsDisableSecretsEngineResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/mounts/{path}',
    ...options,
  });
};

/**
 * Read the configuration of the secret engine at the given path.
 * Mount a new backend at a new path.
 */
export const mountsReadConfiguration = <ThrowOnError extends boolean = false>(
  options: Options<MountsReadConfigurationData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    MountsReadConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/mounts/{path}',
    ...options,
  });
};

/**
 * Enable a new secrets engine at the given path.
 * Mount a new backend at a new path.
 */
export const mountsEnableSecretsEngine = <ThrowOnError extends boolean = false>(
  options: Options<MountsEnableSecretsEngineData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    MountsEnableSecretsEngineResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/mounts/{path}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Tune backend configuration parameters for this mount.
 */
export const mountsReadTuningInformation = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MountsReadTuningInformationData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    MountsReadTuningInformationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/mounts/{path}/tune',
    ...options,
  });
};

/**
 * Tune backend configuration parameters for this mount.
 */
export const mountsTuneConfigurationParameters = <
  ThrowOnError extends boolean = false,
>(
  options: Options<MountsTuneConfigurationParametersData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    MountsTuneConfigurationParametersResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/mounts/{path}/tune',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List namespaces.
 * List namespaces.
 */
export const namespacesListNamespaces = <ThrowOnError extends boolean = false>(
  options: Options<NamespacesListNamespacesData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    NamespacesListNamespacesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/namespaces',
    ...options,
  });
};

/**
 * Lock a namespace.
 * Lock a namespace.
 */
export const namespacesWriteNamespacesApiLockLock = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NamespacesWriteNamespacesApiLockLockData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    NamespacesWriteNamespacesApiLockLockResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/namespaces/api-lock/lock',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Lock a namespace.
 * Lock a namespace.
 */
export const namespacesWriteNamespacesApiLockLockPath = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NamespacesWriteNamespacesApiLockLockPathData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    NamespacesWriteNamespacesApiLockLockPathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/namespaces/api-lock/lock/{path}',
    ...options,
  });
};

/**
 * Unlock a namespace.
 * Unlock a namespace.
 */
export const namespacesWriteNamespacesApiLockUnlock = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NamespacesWriteNamespacesApiLockUnlockData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    NamespacesWriteNamespacesApiLockUnlockResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/namespaces/api-lock/unlock',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Unlock a namespace.
 * Unlock a namespace.
 */
export const namespacesWriteNamespacesApiLockUnlockPath = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    NamespacesWriteNamespacesApiLockUnlockPathData,
    ThrowOnError
  >,
) => {
  return (options.client ?? client).post<
    NamespacesWriteNamespacesApiLockUnlockPathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/namespaces/api-lock/unlock/{path}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a namespace.
 * Create, read, update and delete namespaces.
 */
export const namespacesDeleteNamespacesPath = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NamespacesDeleteNamespacesPathData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    NamespacesDeleteNamespacesPathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/namespaces/{path}',
    ...options,
  });
};

/**
 * Retrieve a namespace.
 * Create, read, update and delete namespaces.
 */
export const namespacesReadNamespacesPath = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NamespacesReadNamespacesPathData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    NamespacesReadNamespacesPathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/namespaces/{path}',
    ...options,
  });
};

/**
 * Create or update a namespace.
 * Create, read, update and delete namespaces.
 */
export const namespacesWriteNamespacesPath = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NamespacesWriteNamespacesPathData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    NamespacesWriteNamespacesPathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/namespaces/{path}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Lists all the plugins known to OpenBao
 */
export const pluginsCatalogListPlugins = <ThrowOnError extends boolean = false>(
  options?: Options<PluginsCatalogListPluginsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PluginsCatalogListPluginsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/plugins/catalog',
    ...options,
  });
};

/**
 * Remove the plugin with the given name.
 * Configures the plugins known to OpenBao
 */
export const pluginsCatalogRemovePlugin = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PluginsCatalogRemovePluginData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    PluginsCatalogRemovePluginResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/plugins/catalog/{name}',
    ...options,
  });
};

/**
 * Return the configuration data for the plugin with the given name.
 * Configures the plugins known to OpenBao
 */
export const pluginsCatalogReadPluginConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PluginsCatalogReadPluginConfigurationData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    PluginsCatalogReadPluginConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/plugins/catalog/{name}',
    ...options,
  });
};

/**
 * Register a new plugin, or updates an existing one with the supplied name.
 * Configures the plugins known to OpenBao
 */
export const pluginsCatalogRegisterPlugin = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PluginsCatalogRegisterPluginData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PluginsCatalogRegisterPluginResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/plugins/catalog/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List the plugins in the catalog.
 * Configures the plugins known to OpenBao
 */
export const pluginsCatalogListPluginsWithType = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PluginsCatalogListPluginsWithTypeData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    PluginsCatalogListPluginsWithTypeResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/plugins/catalog/{type}',
    ...options,
  });
};

/**
 * Remove the plugin with the given name.
 * Configures the plugins known to OpenBao
 */
export const pluginsCatalogRemovePluginWithType = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PluginsCatalogRemovePluginWithTypeData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    PluginsCatalogRemovePluginWithTypeResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/plugins/catalog/{type}/{name}',
    ...options,
  });
};

/**
 * Return the configuration data for the plugin with the given name.
 * Configures the plugins known to OpenBao
 */
export const pluginsCatalogReadPluginConfigurationWithType = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    PluginsCatalogReadPluginConfigurationWithTypeData,
    ThrowOnError
  >,
) => {
  return (options.client ?? client).get<
    PluginsCatalogReadPluginConfigurationWithTypeResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/plugins/catalog/{type}/{name}',
    ...options,
  });
};

/**
 * Register a new plugin, or updates an existing one with the supplied name.
 * Configures the plugins known to OpenBao
 */
export const pluginsCatalogRegisterPluginWithType = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PluginsCatalogRegisterPluginWithTypeData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PluginsCatalogRegisterPluginWithTypeResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/plugins/catalog/{type}/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Reload mounted plugin backends.
 * Either the plugin name (`plugin`) or the desired plugin backend mounts (`mounts`) must be provided, but not both. In the case that the plugin name is provided, all mounted paths that use that plugin backend will be reloaded.  If (`scope`) is provided and is (`global`), the plugin(s) are reloaded globally.
 */
export const pluginsReloadBackends = <ThrowOnError extends boolean = false>(
  options: Options<PluginsReloadBackendsData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PluginsReloadBackendsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/plugins/reload/backend',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List the configured access control policies.
 */
export const policiesListAclPolicies = <ThrowOnError extends boolean = false>(
  options: Options<PoliciesListAclPoliciesData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    PoliciesListAclPoliciesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/policies/acl',
    ...options,
  });
};

/**
 * Delete the ACL policy with the given name.
 * Read, Modify, or Delete an access control policy.
 */
export const policiesDeleteAclPolicy = <ThrowOnError extends boolean = false>(
  options: Options<PoliciesDeleteAclPolicyData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    PoliciesDeleteAclPolicyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/policies/acl/{name}',
    ...options,
  });
};

/**
 * Retrieve information about the named ACL policy.
 * Read, Modify, or Delete an access control policy.
 */
export const policiesReadAclPolicy = <ThrowOnError extends boolean = false>(
  options: Options<PoliciesReadAclPolicyData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    PoliciesReadAclPolicyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/policies/acl/{name}',
    ...options,
  });
};

/**
 * Add a new or update an existing ACL policy.
 * Read, Modify, or Delete an access control policy.
 */
export const policiesWriteAclPolicy = <ThrowOnError extends boolean = false>(
  options: Options<PoliciesWriteAclPolicyData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PoliciesWriteAclPolicyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/policies/acl/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List ACL policies with detailed information.
 */
export const systemListPoliciesDetailedAcl = <
  ThrowOnError extends boolean = false,
>(
  options: Options<SystemListPoliciesDetailedAclData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    SystemListPoliciesDetailedAclResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/policies/detailed/acl',
    ...options,
  });
};

/**
 * List the existing password policies.
 */
export const policiesListPasswordPolicies = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PoliciesListPasswordPoliciesData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    PoliciesListPasswordPoliciesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/policies/password',
    ...options,
  });
};

/**
 * Delete a password policy.
 * Read, Modify, or Delete a password policy.
 */
export const policiesDeletePasswordPolicy = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PoliciesDeletePasswordPolicyData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    PoliciesDeletePasswordPolicyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/policies/password/{name}',
    ...options,
  });
};

/**
 * Retrieve an existing password policy.
 * Read, Modify, or Delete a password policy.
 */
export const policiesReadPasswordPolicy = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PoliciesReadPasswordPolicyData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    PoliciesReadPasswordPolicyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/policies/password/{name}',
    ...options,
  });
};

/**
 * Add a new or update an existing password policy.
 * Read, Modify, or Delete a password policy.
 */
export const policiesWritePasswordPolicy = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PoliciesWritePasswordPolicyData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PoliciesWritePasswordPolicyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/policies/password/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Generate a password from an existing password policy.
 * Generate a password from an existing password policy.
 */
export const policiesGeneratePasswordFromPasswordPolicy = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    PoliciesGeneratePasswordFromPasswordPolicyData,
    ThrowOnError
  >,
) => {
  return (options.client ?? client).get<
    PoliciesGeneratePasswordFromPasswordPolicyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/policies/password/{name}/generate',
    ...options,
  });
};

/**
 * List the configured access control policies.
 */
export const policiesList = <ThrowOnError extends boolean = false>(
  options?: Options<PoliciesListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PoliciesListResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/policy',
    ...options,
  });
};

/**
 * Delete the policy with the given name.
 * Read, Modify, or Delete an access control policy.
 */
export const policiesDeleteAclPolicy2 = <ThrowOnError extends boolean = false>(
  options: Options<PoliciesDeleteAclPolicy2Data, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    PoliciesDeleteAclPolicy2Responses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/policy/{name}',
    ...options,
  });
};

/**
 * Retrieve the policy body for the named policy.
 * Read, Modify, or Delete an access control policy.
 */
export const policiesReadAclPolicy2 = <ThrowOnError extends boolean = false>(
  options: Options<PoliciesReadAclPolicy2Data, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    PoliciesReadAclPolicy2Responses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/policy/{name}',
    ...options,
  });
};

/**
 * Add a new or update an existing policy.
 * Read, Modify, or Delete an access control policy.
 */
export const policiesWriteAclPolicy2 = <ThrowOnError extends boolean = false>(
  options: Options<PoliciesWriteAclPolicy2Data, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PoliciesWriteAclPolicy2Responses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/policy/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Returns an HTML page listing the available profiles.
 * Returns an HTML page listing the available
 * profiles. This should be mainly accessed via browsers or applications that can
 * render pages.
 */
export const pprofIndex = <ThrowOnError extends boolean = false>(
  options?: Options<PprofIndexData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PprofIndexResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/pprof',
    ...options,
  });
};

/**
 * Returns a sampling of all past memory allocations.
 * Returns a sampling of all past memory allocations.
 */
export const pprofMemoryAllocations = <ThrowOnError extends boolean = false>(
  options?: Options<PprofMemoryAllocationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PprofMemoryAllocationsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/pprof/allocs',
    ...options,
  });
};

/**
 * Returns stack traces that led to blocking on synchronization primitives
 * Returns stack traces that led to blocking on synchronization primitives
 */
export const pprofBlocking = <ThrowOnError extends boolean = false>(
  options?: Options<PprofBlockingData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PprofBlockingResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/pprof/block',
    ...options,
  });
};

/**
 * Returns the running program's command line.
 * Returns the running program's command line, with arguments separated by NUL bytes.
 */
export const pprofCommandLine = <ThrowOnError extends boolean = false>(
  options?: Options<PprofCommandLineData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PprofCommandLineResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/pprof/cmdline',
    ...options,
  });
};

/**
 * Returns stack traces of all current goroutines.
 * Returns stack traces of all current goroutines.
 */
export const pprofGoroutines = <ThrowOnError extends boolean = false>(
  options?: Options<PprofGoroutinesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PprofGoroutinesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/pprof/goroutine',
    ...options,
  });
};

/**
 * Returns a sampling of memory allocations of live object.
 * Returns a sampling of memory allocations of live object.
 */
export const pprofMemoryAllocationsLive = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PprofMemoryAllocationsLiveData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PprofMemoryAllocationsLiveResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/pprof/heap',
    ...options,
  });
};

/**
 * Returns stack traces of holders of contended mutexes
 * Returns stack traces of holders of contended mutexes
 */
export const pprofMutexes = <ThrowOnError extends boolean = false>(
  options?: Options<PprofMutexesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PprofMutexesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/pprof/mutex',
    ...options,
  });
};

/**
 * Returns a pprof-formatted cpu profile payload.
 * Returns a pprof-formatted cpu profile payload. Profiling lasts for duration specified in seconds GET parameter, or for 30 seconds if not specified.
 */
export const pprofCpuProfile = <ThrowOnError extends boolean = false>(
  options?: Options<PprofCpuProfileData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PprofCpuProfileResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/pprof/profile',
    ...options,
  });
};

/**
 * Returns the program counters listed in the request.
 * Returns the program counters listed in the request.
 */
export const pprofSymbols = <ThrowOnError extends boolean = false>(
  options?: Options<PprofSymbolsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PprofSymbolsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/pprof/symbol',
    ...options,
  });
};

/**
 * Returns stack traces that led to the creation of new OS threads
 * Returns stack traces that led to the creation of new OS threads
 */
export const pprofThreadCreations = <ThrowOnError extends boolean = false>(
  options?: Options<PprofThreadCreationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PprofThreadCreationsResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/pprof/threadcreate',
    ...options,
  });
};

/**
 * Returns the execution trace in binary form.
 * Returns  the execution trace in binary form. Tracing lasts for duration specified in seconds GET parameter, or for 1 second if not specified.
 */
export const pprofExecutionTrace = <ThrowOnError extends boolean = false>(
  options?: Options<PprofExecutionTraceData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PprofExecutionTraceResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/pprof/trace',
    ...options,
  });
};

/**
 * Create, update and read the quota configuration.
 */
export const rateLimitQuotasReadConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<RateLimitQuotasReadConfigurationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RateLimitQuotasReadConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/quotas/config',
    ...options,
  });
};

/**
 * Create, update and read the quota configuration.
 */
export const rateLimitQuotasConfigure = <ThrowOnError extends boolean = false>(
  options: Options<RateLimitQuotasConfigureData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RateLimitQuotasConfigureResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/quotas/config',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Lists the names of all the rate limit quotas.
 */
export const rateLimitQuotasList = <ThrowOnError extends boolean = false>(
  options: Options<RateLimitQuotasListData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    RateLimitQuotasListResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/quotas/rate-limit',
    ...options,
  });
};

/**
 * Get, create or update rate limit resource quota for an optional namespace or mount.
 */
export const rateLimitQuotasDelete = <ThrowOnError extends boolean = false>(
  options: Options<RateLimitQuotasDeleteData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    RateLimitQuotasDeleteResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/quotas/rate-limit/{name}',
    ...options,
  });
};

/**
 * Get, create or update rate limit resource quota for an optional namespace or mount.
 */
export const rateLimitQuotasRead = <ThrowOnError extends boolean = false>(
  options: Options<RateLimitQuotasReadData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    RateLimitQuotasReadResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/quotas/rate-limit/{name}',
    ...options,
  });
};

/**
 * Get, create or update rate limit resource quota for an optional namespace or mount.
 */
export const rateLimitQuotasWrite = <ThrowOnError extends boolean = false>(
  options: Options<RateLimitQuotasWriteData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RateLimitQuotasWriteResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/quotas/rate-limit/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete the key with given path.
 * Write, Read, and Delete data directly in the Storage backend.
 */
export const rawDelete = <ThrowOnError extends boolean = false>(
  options?: Options<RawDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    RawDeleteResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/raw',
    ...options,
  });
};

/**
 * Read the value of the key at the given path.
 * Write, Read, and Delete data directly in the Storage backend.
 */
export const rawRead = <ThrowOnError extends boolean = false>(
  options?: Options<RawReadData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RawReadResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/raw',
    ...options,
  });
};

/**
 * Update the value of the key at the given path.
 * Write, Read, and Delete data directly in the Storage backend.
 */
export const rawWrite = <ThrowOnError extends boolean = false>(
  options: Options<RawWriteData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RawWriteResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/raw',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete the key with given path.
 * Write, Read, and Delete data directly in the Storage backend.
 */
export const rawDeletePath = <ThrowOnError extends boolean = false>(
  options: Options<RawDeletePathData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    RawDeletePathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/raw/{path}',
    ...options,
  });
};

/**
 * Read the value of the key at the given path.
 * Write, Read, and Delete data directly in the Storage backend.
 */
export const rawReadPath = <ThrowOnError extends boolean = false>(
  options: Options<RawReadPathData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    RawReadPathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/raw/{path}',
    ...options,
  });
};

/**
 * Update the value of the key at the given path.
 * Write, Read, and Delete data directly in the Storage backend.
 */
export const rawWritePath = <ThrowOnError extends boolean = false>(
  options: Options<RawWritePathData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RawWritePathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/raw/{path}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete the backup copy of PGP-encrypted unseal keys.
 * Allows fetching or deleting the backup of the rotated unseal keys.
 */
export const rekeyDeleteBackupKey = <ThrowOnError extends boolean = false>(
  options?: Options<RekeyDeleteBackupKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    RekeyDeleteBackupKeyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rekey/backup',
    ...options,
  });
};

/**
 * Return the backup copy of PGP-encrypted unseal keys.
 * Allows fetching or deleting the backup of the rotated unseal keys.
 */
export const rekeyReadBackupKey = <ThrowOnError extends boolean = false>(
  options?: Options<RekeyReadBackupKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RekeyReadBackupKeyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rekey/backup',
    ...options,
  });
};

/**
 * Cancels any in-progress rekey.
 * This clears the rekey settings as well as any progress made. This must be called to change the parameters of the rekey. Note: verification is still a part of a rekey. If rekeying is canceled during the verification flow, the current unseal keys remain valid.
 */
export const rekeyAttemptCancel = <ThrowOnError extends boolean = false>(
  options?: Options<RekeyAttemptCancelData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    RekeyAttemptCancelResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rekey/init',
    ...options,
  });
};

/**
 * Reads the configuration and progress of the current rekey attempt.
 */
export const rekeyAttemptReadProgress = <ThrowOnError extends boolean = false>(
  options?: Options<RekeyAttemptReadProgressData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RekeyAttemptReadProgressResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rekey/init',
    ...options,
  });
};

/**
 * Initializes a new rekey attempt.
 * Only a single rekey attempt can take place at a time, and changing the parameters of a rekey requires canceling and starting a new rekey, which will also provide a new nonce.
 */
export const rekeyAttemptInitialize = <ThrowOnError extends boolean = false>(
  options: Options<RekeyAttemptInitializeData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RekeyAttemptInitializeResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rekey/init',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Allows fetching or deleting the backup of the rotated unseal keys.
 */
export const rekeyDeleteBackupRecoveryKey = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<RekeyDeleteBackupRecoveryKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    RekeyDeleteBackupRecoveryKeyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rekey/recovery-key-backup',
    ...options,
  });
};

/**
 * Allows fetching or deleting the backup of the rotated unseal keys.
 */
export const rekeyReadBackupRecoveryKey = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<RekeyReadBackupRecoveryKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RekeyReadBackupRecoveryKeyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rekey/recovery-key-backup',
    ...options,
  });
};

/**
 * Enter a single unseal key share to progress the rekey of the OpenBao.
 */
export const rekeyAttemptUpdate = <ThrowOnError extends boolean = false>(
  options: Options<RekeyAttemptUpdateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RekeyAttemptUpdateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rekey/update',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Cancel any in-progress rekey verification operation.
 * This clears any progress made and resets the nonce. Unlike a `DELETE` against `sys/rekey/init`, this only resets the current verification operation, not the entire rekey atttempt.
 */
export const rekeyVerificationCancel = <ThrowOnError extends boolean = false>(
  options?: Options<RekeyVerificationCancelData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    RekeyVerificationCancelResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rekey/verify',
    ...options,
  });
};

/**
 * Read the configuration and progress of the current rekey verification attempt.
 */
export const rekeyVerificationReadProgress = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<RekeyVerificationReadProgressData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RekeyVerificationReadProgressResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rekey/verify',
    ...options,
  });
};

/**
 * Enter a single new key share to progress the rekey verification operation.
 */
export const rekeyVerificationUpdate = <ThrowOnError extends boolean = false>(
  options: Options<RekeyVerificationUpdateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RekeyVerificationUpdateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rekey/verify',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Initiate a mount migration
 * Move the mount point of an already-mounted backend, within or across namespaces
 */
export const remount = <ThrowOnError extends boolean = false>(
  options: Options<RemountData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RemountResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/remount',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Check status of a mount migration
 * Check the status of a mount move operation
 */
export const remountStatus = <ThrowOnError extends boolean = false>(
  options: Options<RemountStatusData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    RemountStatusResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/remount/status/{migration_id}',
    ...options,
  });
};

/**
 * Renews a lease, requesting to extend the lease.
 * Renew a lease on a secret
 */
export const leasesRenewLease2 = <ThrowOnError extends boolean = false>(
  options: Options<LeasesRenewLease2Data, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LeasesRenewLease2Responses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/renew',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Renews a lease, requesting to extend the lease.
 * Renew a lease on a secret
 */
export const leasesRenewLeaseWithId2 = <ThrowOnError extends boolean = false>(
  options: Options<LeasesRenewLeaseWithId2Data, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LeasesRenewLeaseWithId2Responses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/renew/{url_lease_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Revokes a lease immediately.
 * Revoke a leased secret immediately
 */
export const leasesRevokeLease2 = <ThrowOnError extends boolean = false>(
  options: Options<LeasesRevokeLease2Data, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LeasesRevokeLease2Responses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/revoke',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Revokes all secrets or tokens generated under a given prefix immediately
 * Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.
 *
 * By ignoring these errors, OpenBao abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
 */
export const leasesForceRevokeLeaseWithPrefix2 = <
  ThrowOnError extends boolean = false,
>(
  options: Options<LeasesForceRevokeLeaseWithPrefix2Data, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LeasesForceRevokeLeaseWithPrefix2Responses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/revoke-force/{prefix}',
    ...options,
  });
};

/**
 * Revokes all secrets (via a lease ID prefix) or tokens (via the tokens' path property) generated under a given prefix immediately.
 * Revoke all secrets generated in a given prefix
 */
export const leasesRevokeLeaseWithPrefix2 = <
  ThrowOnError extends boolean = false,
>(
  options: Options<LeasesRevokeLeaseWithPrefix2Data, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LeasesRevokeLeaseWithPrefix2Responses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/revoke-prefix/{prefix}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Revokes a lease immediately.
 * Revoke a leased secret immediately
 */
export const leasesRevokeLeaseWithId2 = <ThrowOnError extends boolean = false>(
  options: Options<LeasesRevokeLeaseWithId2Data, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    LeasesRevokeLeaseWithId2Responses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/revoke/{url_lease_id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Rotates the backend encryption key used to persist data.
 */
export const encryptionKeyRotate = <ThrowOnError extends boolean = false>(
  options?: Options<EncryptionKeyRotateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    EncryptionKeyRotateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate',
    ...options,
  });
};

export const encryptionKeyReadRotationConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<EncryptionKeyReadRotationConfigurationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    EncryptionKeyReadRotationConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/config',
    ...options,
  });
};

export const encryptionKeyConfigureRotationConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    EncryptionKeyConfigureRotationConfigurationData,
    ThrowOnError
  >,
) => {
  return (options.client ?? client).post<
    EncryptionKeyConfigureRotationConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/config',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Rotates the backend encryption key used to persist data.
 */
export const encryptionKeyRotateRotateKeyring = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<EncryptionKeyRotateRotateKeyringData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    EncryptionKeyRotateRotateKeyringResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/keyring',
    ...options,
  });
};

export const encryptionKeyReadRotateKeyringConfig = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<EncryptionKeyReadRotateKeyringConfigData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    EncryptionKeyReadRotateKeyringConfigResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/keyring/config',
    ...options,
  });
};

export const encryptionKeyConfigureRotateKeyringConfig = <
  ThrowOnError extends boolean = false,
>(
  options: Options<EncryptionKeyConfigureRotateKeyringConfigData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    EncryptionKeyConfigureRotateKeyringConfigResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/keyring/config',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete the backup copy of PGP-encrypted unseal keys.
 * Allows fetching or deleting the backup of the rotated unseal keys.
 */
export const rotateDeleteRotateRecoveryBackup = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<RotateDeleteRotateRecoveryBackupData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    RotateDeleteRotateRecoveryBackupResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/recovery/backup',
    ...options,
  });
};

/**
 * Return the backup copy of PGP-encrypted unseal keys.
 * Allows fetching or deleting the backup of the rotated unseal keys.
 */
export const rotateReadRotateRecoveryBackup = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<RotateReadRotateRecoveryBackupData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RotateReadRotateRecoveryBackupResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/recovery/backup',
    ...options,
  });
};

/**
 * Cancels any in-progress rotate root operation.
 * This clears the rotate settings as well as any progress made. This must be called to change the parameters of the rotate. Note: verification is still a part of a rotate. If rotating is canceled during the verification flow, the current unseal keys remain valid.
 */
export const rotateAttemptCancelRotateRecoveryInit = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<RotateAttemptCancelRotateRecoveryInitData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    RotateAttemptCancelRotateRecoveryInitResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/recovery/init',
    ...options,
  });
};

/**
 * Reads the configuration and progress of the current root rotate attempt.
 * Initialize, read status or cancel the process of the rotation of the root or recovery key.
 */
export const rotateAttemptReadRotateRecoveryInit = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<RotateAttemptReadRotateRecoveryInitData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RotateAttemptReadRotateRecoveryInitResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/recovery/init',
    ...options,
  });
};

/**
 * Initializes a new root rotate attempt.
 * Only a single rotate attempt can take place at a time, and changing the parameters of a rotate requires canceling and starting a new rotation, which will also provide a new nonce.
 */
export const rotateAttemptInitializeRotateRecoveryInit = <
  ThrowOnError extends boolean = false,
>(
  options: Options<RotateAttemptInitializeRotateRecoveryInitData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RotateAttemptInitializeRotateRecoveryInitResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/recovery/init',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Enter a single unseal key share to progress the rotation of the root key of OpenBao.
 * Progress the rotation process by providing a single key share.
 */
export const rotateAttemptUpdateRotateRecoveryUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<RotateAttemptUpdateRotateRecoveryUpdateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RotateAttemptUpdateRotateRecoveryUpdateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/recovery/update',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Cancel any in-progress rotate verification operation.
 * This clears any progress made and resets the nonce. Unlike a `DELETE` against `sys/rotate/(root/recovery)/init`, this only resets the current verification operation, not the entire rotate atttempt.
 */
export const rotateVerificationCancelRotateRecoveryVerify = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    RotateVerificationCancelRotateRecoveryVerifyData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).delete<
    RotateVerificationCancelRotateRecoveryVerifyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/recovery/verify',
    ...options,
  });
};

/**
 * Read the configuration and progress of the current rotate verification attempt.
 * Read status of, progress or cancel the verification process of the rotation attempt.
 */
export const rotateVerificationReadRotateRecoveryVerify = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    RotateVerificationReadRotateRecoveryVerifyData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    RotateVerificationReadRotateRecoveryVerifyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/recovery/verify',
    ...options,
  });
};

/**
 * Enter a single new key share to progress the rotation verification operation.
 * Read status of, progress or cancel the verification process of the rotation attempt.
 */
export const rotateVerificationUpdateRotateRecoveryVerify = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    RotateVerificationUpdateRotateRecoveryVerifyData,
    ThrowOnError
  >,
) => {
  return (options.client ?? client).post<
    RotateVerificationUpdateRotateRecoveryVerifyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/recovery/verify',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Perform a root key rotation without requiring key shares to be provided.
 */
export const rootKeyRotate = <ThrowOnError extends boolean = false>(
  options?: Options<RootKeyRotateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    RootKeyRotateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/root',
    ...options,
  });
};

/**
 * Delete the backup copy of PGP-encrypted unseal keys.
 * Allows fetching or deleting the backup of the rotated unseal keys.
 */
export const rotateDeleteBackupKey = <ThrowOnError extends boolean = false>(
  options?: Options<RotateDeleteBackupKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    RotateDeleteBackupKeyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/root/backup',
    ...options,
  });
};

/**
 * Return the backup copy of PGP-encrypted unseal keys.
 * Allows fetching or deleting the backup of the rotated unseal keys.
 */
export const rotateReadBackupKey = <ThrowOnError extends boolean = false>(
  options?: Options<RotateReadBackupKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RotateReadBackupKeyResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/root/backup',
    ...options,
  });
};

/**
 * Cancels any in-progress rotate root operation.
 * This clears the rotate settings as well as any progress made. This must be called to change the parameters of the rotate. Note: verification is still a part of a rotate. If rotating is canceled during the verification flow, the current unseal keys remain valid.
 */
export const rotateAttemptCancel = <ThrowOnError extends boolean = false>(
  options?: Options<RotateAttemptCancelData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    RotateAttemptCancelResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/root/init',
    ...options,
  });
};

/**
 * Reads the configuration and progress of the current root rotate attempt.
 * Initialize, read status or cancel the process of the rotation of the root or recovery key.
 */
export const rotateAttemptReadProgress = <ThrowOnError extends boolean = false>(
  options?: Options<RotateAttemptReadProgressData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RotateAttemptReadProgressResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/root/init',
    ...options,
  });
};

/**
 * Initializes a new root rotate attempt.
 * Only a single rotate attempt can take place at a time, and changing the parameters of a rotate requires canceling and starting a new rotation, which will also provide a new nonce.
 */
export const rotateAttemptInitialize = <ThrowOnError extends boolean = false>(
  options: Options<RotateAttemptInitializeData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RotateAttemptInitializeResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/root/init',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Enter a single unseal key share to progress the rotation of the root key of OpenBao.
 * Progress the rotation process by providing a single key share.
 */
export const rotateAttemptUpdate = <ThrowOnError extends boolean = false>(
  options: Options<RotateAttemptUpdateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RotateAttemptUpdateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/root/update',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Cancel any in-progress rotate verification operation.
 * This clears any progress made and resets the nonce. Unlike a `DELETE` against `sys/rotate/(root/recovery)/init`, this only resets the current verification operation, not the entire rotate atttempt.
 */
export const rotateVerificationCancel = <ThrowOnError extends boolean = false>(
  options?: Options<RotateVerificationCancelData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    RotateVerificationCancelResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/root/verify',
    ...options,
  });
};

/**
 * Read the configuration and progress of the current rotate verification attempt.
 * Read status of, progress or cancel the verification process of the rotation attempt.
 */
export const rotateVerificationReadProgress = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<RotateVerificationReadProgressData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    RotateVerificationReadProgressResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/root/verify',
    ...options,
  });
};

/**
 * Enter a single new key share to progress the rotation verification operation.
 * Read status of, progress or cancel the verification process of the rotation attempt.
 */
export const rotateVerificationUpdate = <ThrowOnError extends boolean = false>(
  options: Options<RotateVerificationUpdateData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RotateVerificationUpdateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/rotate/root/verify',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Seal the OpenBao instance.
 * Seals the OpenBao instance.
 */
export const seal = <ThrowOnError extends boolean = false>(
  options?: Options<SealData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<SealResponses, unknown, ThrowOnError>(
    {
      url: '/sys/seal',
      ...options,
    },
  );
};

/**
 * Check the seal status of an OpenBao instance.
 * Returns the seal status of the OpenBao instance.
 */
export const sealStatus = <ThrowOnError extends boolean = false>(
  options?: Options<SealStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SealStatusResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/seal-status',
    ...options,
  });
};

/**
 * Cause the node to give up active status.
 * This endpoint forces the node to give up active status. If the node does not have active status, this endpoint does nothing. Note that the node will sleep for ten seconds before attempting to grab the active lock again, but if no standby nodes grab the active lock in the interim, the same node may become the active node again.
 */
export const stepDownLeader = <ThrowOnError extends boolean = false>(
  options?: Options<StepDownLeaderData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    StepDownLeaderResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/step-down',
    ...options,
  });
};

/**
 * Generate a hash sum for input data
 */
export const generateHash = <ThrowOnError extends boolean = false>(
  options: Options<GenerateHashData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    GenerateHashResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/tools/hash',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Generate a hash sum for input data
 */
export const generateHashWithAlgorithm = <ThrowOnError extends boolean = false>(
  options: Options<GenerateHashWithAlgorithmData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    GenerateHashWithAlgorithmResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/tools/hash/{urlalgorithm}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Generate random bytes
 */
export const generateRandom = <ThrowOnError extends boolean = false>(
  options: Options<GenerateRandomData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    GenerateRandomResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/tools/random',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Generate random bytes
 */
export const generateRandomWithSource = <ThrowOnError extends boolean = false>(
  options: Options<GenerateRandomWithSourceData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    GenerateRandomWithSourceResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/tools/random/{source}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Generate random bytes
 */
export const generateRandomWithSourceAndBytes = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GenerateRandomWithSourceAndBytesData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    GenerateRandomWithSourceAndBytesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/tools/random/{source}/{urlbytes}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Generate random bytes
 */
export const generateRandomWithBytes = <ThrowOnError extends boolean = false>(
  options: Options<GenerateRandomWithBytesData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    GenerateRandomWithBytesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/tools/random/{urlbytes}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Unseal the OpenBao instance.
 * Unseals the OpenBao instance.
 */
export const unseal = <ThrowOnError extends boolean = false>(
  options: Options<UnsealData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    UnsealResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/unseal',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Returns map of historical version change entries
 * List historical version changes sorted by installation time in ascending order.
 */
export const versionHistory = <ThrowOnError extends boolean = false>(
  options: Options<VersionHistoryData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    VersionHistoryResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/version-history',
    ...options,
  });
};

/**
 * Look up wrapping properties for the requester's token.
 * Looks up the properties of a response-wrapped token.
 */
export const readWrappingProperties2 = <ThrowOnError extends boolean = false>(
  options?: Options<ReadWrappingProperties2Data, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadWrappingProperties2Responses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/wrapping/lookup',
    ...options,
  });
};

/**
 * Look up wrapping properties for the given token.
 * Looks up the properties of a response-wrapped token.
 */
export const readWrappingProperties = <ThrowOnError extends boolean = false>(
  options: Options<ReadWrappingPropertiesData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    ReadWrappingPropertiesResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/wrapping/lookup',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Rotates a response-wrapped token.
 */
export const rewrap = <ThrowOnError extends boolean = false>(
  options: Options<RewrapData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    RewrapResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/wrapping/rewrap',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Unwraps a response-wrapped token.
 */
export const unwrap = <ThrowOnError extends boolean = false>(
  options: Options<UnwrapData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    UnwrapResponses,
    unknown,
    ThrowOnError
  >({
    url: '/sys/wrapping/unwrap',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Response-wraps an arbitrary JSON object.
 */
export const wrap = <ThrowOnError extends boolean = false>(
  options?: Options<WrapData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<WrapResponses, unknown, ThrowOnError>(
    {
      url: '/sys/wrapping/wrap',
      ...options,
    },
  );
};

/**
 * Read the backend level settings.
 * Configures settings for the KV store
 */
export const kvReadConfig = <ThrowOnError extends boolean = false>(
  options: Options<KvReadConfigData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    KvReadConfigResponses,
    unknown,
    ThrowOnError
  >({
    url: '/{secret_mount_path}/config',
    ...options,
  });
};

/**
 * Configure backend level settings that are applied to every key in the key-value store.
 * Configures settings for the KV store
 */
export const kvWriteConfig = <ThrowOnError extends boolean = false>(
  options: Options<KvWriteConfigData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    KvWriteConfigResponses,
    unknown,
    ThrowOnError
  >({
    url: '/{secret_mount_path}/config',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Write, Patch, Read, and Delete data in the Key-Value Store.
 */
export const kvDeleteDataPath = <ThrowOnError extends boolean = false>(
  options: Options<KvDeleteDataPathData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    KvDeleteDataPathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/{secret_mount_path}/data/{path}',
    ...options,
  });
};

/**
 * Write, Patch, Read, and Delete data in the Key-Value Store.
 */
export const kvReadDataPath = <ThrowOnError extends boolean = false>(
  options: Options<KvReadDataPathData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    KvReadDataPathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/{secret_mount_path}/data/{path}',
    ...options,
  });
};

/**
 * Write, Patch, Read, and Delete data in the Key-Value Store.
 */
export const kvWriteDataPath = <ThrowOnError extends boolean = false>(
  options: Options<KvWriteDataPathData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    KvWriteDataPathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/{secret_mount_path}/data/{path}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Marks one or more versions as deleted in the KV store.
 */
export const kvWriteDeletePath = <ThrowOnError extends boolean = false>(
  options: Options<KvWriteDeletePathData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    KvWriteDeletePathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/{secret_mount_path}/delete/{path}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Permanently removes one or more versions in the KV store
 */
export const kvWriteDestroyPath = <ThrowOnError extends boolean = false>(
  options: Options<KvWriteDestroyPathData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    KvWriteDestroyPathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/{secret_mount_path}/destroy/{path}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Allows listing detailed information about key metadata in the KV store.
 */
export const kvListDetailedMetadataPath = <
  ThrowOnError extends boolean = false,
>(
  options: Options<KvListDetailedMetadataPathData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    KvListDetailedMetadataPathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/{secret_mount_path}/detailed-metadata/{path}',
    ...options,
  });
};

/**
 * Allows interaction with key metadata and settings in the KV store.
 */
export const kvDeleteMetadataPath = <ThrowOnError extends boolean = false>(
  options: Options<KvDeleteMetadataPathData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    KvDeleteMetadataPathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/{secret_mount_path}/metadata/{path}',
    ...options,
  });
};

/**
 * Allows interaction with key metadata and settings in the KV store.
 */
export const kvReadMetadataPath = <ThrowOnError extends boolean = false>(
  options: Options<KvReadMetadataPathData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    KvReadMetadataPathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/{secret_mount_path}/metadata/{path}',
    ...options,
  });
};

/**
 * Allows interaction with key metadata and settings in the KV store.
 */
export const kvWriteMetadataPath = <ThrowOnError extends boolean = false>(
  options: Options<KvWriteMetadataPathData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    KvWriteMetadataPathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/{secret_mount_path}/metadata/{path}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Read the structure of a secret entry from the Key-Value store with the values removed.
 */
export const kvReadSubkeysPath = <ThrowOnError extends boolean = false>(
  options: Options<KvReadSubkeysPathData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    KvReadSubkeysPathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/{secret_mount_path}/subkeys/{path}',
    ...options,
  });
};

/**
 * Undeletes one or more versions from the KV store.
 */
export const kvWriteUndeletePath = <ThrowOnError extends boolean = false>(
  options: Options<KvWriteUndeletePathData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    KvWriteUndeletePathResponses,
    unknown,
    ThrowOnError
  >({
    url: '/{secret_mount_path}/undelete/{path}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};
